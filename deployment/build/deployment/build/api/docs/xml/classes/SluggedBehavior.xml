<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src#" full="SluggedBehavior" namespace="" name="SluggedBehavior" abstract="false" final="false" start="36" end="657">
  <file path="app/Plugin/Tools/Model/Behavior" file="SluggedBehavior.php" realpath="/home/vagrant/socsoc/app/Plugin/Tools/Model/Behavior/SluggedBehavior.php" size="22389" time="2014-04-09T08:38:48+00:00" unixtime="1397032728" sha1="1219e80e412e2dbe6672831a95394300c18a4fc9"/>
  <docblock>
    <description compact="SluggedBehavior class"/>
    <uses value="ModelBehavior"/>
    <version value="2.x"/>
    <modified value="Mark Scherer"/>
  </docblock>
  <extends full="ModelBehavior" namespace="" name="ModelBehavior"/>
  <member name="_defaultSettings" type="array" visibility="protected" line="66">
    <docblock>
      <description compact="defaultSettings property">label
	set to the name of a field to use for the slug, an array of fields to use as slugs or leave as null to rely
	on the format returned by find('list') to determine the string to use for slugs
overwrite has 2 values
	false - once the slug has been saved, do not change it (use if you are doing lookups based on slugs)
	true - if the label field values change, regenerate the slug (use if you are the slug is just window-dressing)
unique has 2 values
	false - will not enforce a unique slug, whatever the label is is direclty slugged without checking for duplicates
	true - use if you are doing lookups based on slugs (see overwrite)
mode has the following values
	ascii - retuns an ascii slug generated using the core Inflector::slug() function
	display - a dummy mode which returns a slug legal for display - removes illegal (not unprintable) characters
	url - returns a slug appropriate to put in a url
	class - a dummy mode which returns a slug appropriate to put in a html class (there are no restrictions)
	id - retuns a slug appropriate to use in a html id
case has the following values
	null - don't change the case of the slug
	low - force lower case. E.g. "this-is-the-slug"
	up - force upper case E.g. "THIS-IS-THE-SLUG"
	title - force title case. E.g. "This-Is-The-Slug"
	camel - force CamelCase. E.g. "ThisIsTheSlug"</description>
      <var type="array"/>
      <access value="protected"/>
    </docblock>
  </member>
  <member name="stopWords" type="array" visibility="public" line="98">
    <docblock>
      <description compact="stopWords property">A (3 letter) language code indexed array of stop worlds</description>
      <var type="array"/>
      <access value="public"/>
    </docblock>
  </member>
  <method name="setup" start="111" end="141" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="setup method">Use the model's label field as the default field on which to base the slug, the label can be made up of multiple
fields by specifying an array of fields</description>
      <param type="mixed" variable="$Model"/>
      <param type="array" variable="$config"/>
      <access value="public"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="config" byreference="false" type="array"/>
  </method>
  <method name="beforeValidate" start="150" end="161" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="beforeValidate method"/>
      <param type="mixed" variable="$Model"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <access value="public"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="beforeSave" start="170" end="181" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="beforeSave method"/>
      <param type="mixed" variable="$Model"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <access value="public"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="generateSlug" start="197" end="268" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="generate slug method">if a new row, or overwrite is set to true, check for a change to a label field and add the slug to the data
to be saved
If no slug at all is returned (should not be permitted and prevented by validating the label fields) the model
alias will be used as a slug.
If unique is set to true, check for a unique slug and if unavailable suffix the slug with -1, -2, -3 etc.
until a unique slug is found</description>
      <param type="mixed" variable="$Model"/>
      <access value="public"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="removeStopWords" start="289" end="374" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="removeStopWords from a string. if $splitOnStopWord is true, the following occurs: &#9;input &quot;apples bananas pears and red cars&quot; &#9;output array('apples bananas pears', 'red cars')">If the passed string doesn't contain the separator, or after stripping out stop words there's
nothing left - the original input is returned (in the desired format)

Therefore passing "contain" will return immediately array('contain')
Passing "contain this text" will return array('text')
	both contain and this are stop words
Passing "contain this" will return array('contain this')</description>
      <param type="mixed" variable="$Model"/>
      <param description="string or array of words" type="mixed" variable="$string"/>
      <param type="array" variable="$params"/>
      <return type="mixed"/>
      <access value="public"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="string" byreference="false" type="string" default="''"/>
    <parameter name="params" byreference="false" type="array"/>
    <inline>
      <comment value="if (!class_exists('MiCache')) {" line="298"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="App::import('Vendor', 'Mi.MiCache');" line="299"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="}" line="300"/>
    </inline>
  </method>
  <method name="slug" start="390" end="443" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="slug method">For the given string, generate a slug. The replacements used are based on the mode setting, If tidy is false
(only possible if directly called - primarily for tracing and testing) separators will not be cleaned up
and so slugs like "-----as---df-----" are possible, which by default would otherwise be returned as "as-df".
If the mode is "id" and the first charcter of the regex-ed slug is numeric, it will be prefixed with an x.</description>
      <param type="mixed" variable="$Model"/>
      <param type="mixed" variable="$string"/>
      <param type="object" variable="$tidy">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return description="a slug" type="string"/>
      <access value="public"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="tidy" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="display" start="457" end="468" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="display method">Cheat - use find('list') and assume it has been modified such that lists show in the desired format.
First check (since this method is called in beforeSave) if there is data to be saved, and use that
to get the display name
Otherwise, read from the database</description>
      <param type="mixed" variable="$id"/>
      <return description="string (the display name) or false" type="mixed"/>
      <access value="public"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="resetSlugs" start="482" end="513" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="resetSlugs method">Regenerate all slugs. On large dbs this can take more than 30 seconds - a time limit is set to allow a minimum
100 updates per second as a preventative measure.</description>
      <param type="object" variable="$Model">
        <type full="AppModel" namespace="" name="AppModel"/>
      </param>
      <param type="array" variable="$conditions"/>
      <param type="int" variable="$recursive"/>
      <return description="true on success false otherwise" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <access value="public"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="params" byreference="false" type="array"/>
  </method>
  <method name="_multiSlug" start="525" end="541" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Multi slug method">Handle both slug and lable fields using the translate behavior, and being edited
in multiple locales at once</description>
      <param type="mixed" variable="$Model"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <access value="protected"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="_pregReplace" start="553" end="562" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Wrapper for preg replace taking care of encoding"/>
      <param type="mixed" variable="$pattern"/>
      <param type="mixed" variable="$replace"/>
      <param type="mixed" variable="$string"/>
      <param description="'UTF-8'" type="string" variable="$encoding"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <access value="protected"/>
    </docblock>
    <parameter name="pattern" byreference="false" type="{unknown}"/>
    <parameter name="replace" byreference="false" type="{unknown}"/>
    <parameter name="string" byreference="false" type="{unknown}"/>
    <parameter name="encoding" byreference="false" type="string" default="'UTF-8'"/>
  </method>
  <method name="_setEncoding" start="574" end="590" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="setEncoding method"/>
      <param type="mixed" variable="$Model"/>
      <param description="null" type="mixed" variable="$encoding"/>
      <param type="mixed" variable="$string"/>
      <param description="null" type="mixed" variable="$reset"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <access value="protected"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="encoding" byreference="true" type="{unknown}" default="null"/>
    <parameter name="string" byreference="true" type="{unknown}"/>
    <parameter name="reset" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="_regex" start="603" end="656" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="regex method">Based upon the mode return a partial regex to generate a valid string for the intended use. Note that you
can use almost litterally anything in a url - the limitation is only in what your own application
understands. See the test case for info on how these regex patterns were generated.</description>
      <param type="string" variable="$mode"/>
      <return description="a partial regex" type="string"/>
      <access value="private"/>
    </docblock>
    <parameter name="mode" byreference="false" type="{unknown}"/>
  </method>
<enrichments><enrichment type="build"><date unix="1397048043" date="09-04-2014" time="12:54:03" iso="2014-04-09T12:54:03+00:00" rfc="Wed, 09 Apr 2014 12:54:03 +0000"/><phpdox xmlns="http://xml.phpdox.net/src#" version="0.6.5" info="phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" generated="Generated using phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" phar="yes"><enricher type="build"/><enricher type="git"/><enricher type="checkstyle"/><enricher type="pmd"/><enricher type="phploc"/></phpdox><php xmlns="http://xml.phpdox.net/src#" version="5.3.10-1ubuntu3.11" os="Linux"><extension name="Core"/><extension name="date"/><extension name="ereg"/><extension name="libxml"/><extension name="openssl"/><extension name="pcre"/><extension name="zlib"/><extension name="bcmath"/><extension name="bz2"/><extension name="calendar"/><extension name="ctype"/><extension name="dba"/><extension name="dom"/><extension name="hash"/><extension name="fileinfo"/><extension name="filter"/><extension name="ftp"/><extension name="gettext"/><extension name="SPL"/><extension name="iconv"/><extension name="json"/><extension name="mbstring"/><extension name="pcntl"/><extension name="session"/><extension name="posix"/><extension name="readline"/><extension name="Reflection"/><extension name="standard"/><extension name="shmop"/><extension name="SimpleXML"/><extension name="soap"/><extension name="sockets"/><extension name="Phar"/><extension name="exif"/><extension name="sysvmsg"/><extension name="sysvsem"/><extension name="sysvshm"/><extension name="tokenizer"/><extension name="wddx"/><extension name="xml"/><extension name="xmlreader"/><extension name="xmlwriter"/><extension name="zip"/><extension name="PDO"/><extension name="xsl"/><extension name="mhash"/></php></enrichment><enrichment type="git"><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="f16525be325aa16218dfea4fe983ccf2a60b79b9"><author email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><commiter email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><message>wijzigingen na het aanmaken van een nieuw phpstrom project</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="287b8750eddef6446e689ccd35cee74b32cde2ed"><author email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><commiter email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><message>rechten zijn gewijzigd</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="58d361958cff9f7a6a85bed1ef717e1029d99d24"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:53:28+00:00" unixtime="1372262008"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:55:26+00:00" unixtime="1372262126"/><message>phpstorm connect?</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="ab510a8ba8b3726396604720ff22cc62d62cda63"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><message>hele hoop opgelost, ik had het eerder moeten committen :$</message></commit></enrichment></enrichments></class>
