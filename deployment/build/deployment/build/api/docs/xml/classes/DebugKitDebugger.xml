<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src#" full="DebugKitDebugger" namespace="" name="DebugKitDebugger" abstract="false" final="false" start="33" end="225">
  <file path="app/Plugin/DebugKit/Lib" file="DebugKitDebugger.php" realpath="/home/vagrant/socsoc/app/Plugin/DebugKit/Lib/DebugKitDebugger.php" size="6775" time="2014-04-09T08:38:48+00:00" unixtime="1397032728" sha1="afc9763fe6a60d6639ffc0c16d177ea039bf5a0a"/>
  <docblock>
    <description compact="Debug Kit Temporary Debugger Class">Provides the future features that are planned. Yet not implemented in the 1.2 code base

This file will not be needed in future version of CakePHP.</description>
  </docblock>
  <extends full="Debugger" namespace="" name="Debugger"/>
  <destructor name="__destruct" start="42" end="70" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="destruct method">Allow timer info to be displayed if the code dies or is being debugged before rendering the view
Cheat and use the debug log class for formatting</description>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
  </destructor>
  <method name="startTimer" start="79" end="81" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Start an benchmarking timer."/>
      <param description="The name of the timer to start." type="string" variable="$name"/>
      <param description="A message for your timer" type="string" variable="$message"/>
      <return description="true" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <deprecated value="use DebugTimer::start()"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}" default="null"/>
    <parameter name="message" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="stopTimer" start="92" end="94" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Stop a benchmarking timer.">$name should be the same as the $name used in startTimer().</description>
      <param description="The name of the timer to end." type="string" variable="$name"/>
      <return description="true if timer was ended, false if timer was not started." type="boolean"/>
      <deprecated value="use DebugTimer::stop()"/>
    </docblock>
    <parameter name="name" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getTimers" start="104" end="106" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get all timers that have been started and stopped.">Calculates elapsed time for each timer. If clear is true, will delete existing timers</description>
      <param description="false" type="object" variable="$clear">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="array"/>
      <deprecated value="use DebugTimer::getAll()"/>
    </docblock>
    <parameter name="clear" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="clearTimers" start="114" end="116" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Clear all existing timers"/>
      <return description="true" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <deprecated value="use DebugTimer::clear()"/>
    </docblock>
  </method>
  <method name="elapsedTime" start="126" end="128" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the difference in time between the timer start and timer end."/>
      <param description="the name of the timer you want elapsed time for." variable="$name" type="string"/>
      <param description="the number of decimal places to return, defaults to 5." variable="$precision" type="int"/>
      <return description="number of seconds elapsed for timer name, 0 on missing key" type="float"/>
      <deprecated value="use DebugTimer::elapsedTime()"/>
    </docblock>
    <parameter name="name" byreference="false" type="string" default="'default'"/>
    <parameter name="precision" byreference="false" type="integer" default="5"/>
  </method>
  <method name="requestTime" start="136" end="138" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get the total execution time until this point"/>
      <return description="elapsed time in seconds since script start." type="float"/>
      <deprecated value="use DebugTimer::requestTime()"/>
    </docblock>
  </method>
  <method name="requestStartTime" start="146" end="148" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="get the time the current request started."/>
      <return description="time of request start" type="float"/>
      <deprecated value="use DebugTimer::requestStartTime()"/>
    </docblock>
  </method>
  <method name="getMemoryUse" start="156" end="158" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="get current memory usage"/>
      <return description="number of bytes ram currently in use. 0 if memory_get_usage() is not available." type="integer"/>
      <deprecated value="Use DebugMemory::getCurrent() instead."/>
    </docblock>
  </method>
  <method name="getPeakMemoryUse" start="166" end="168" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get peak memory use"/>
      <return description="peak memory use (in bytes).  Returns 0 if memory_get_peak_usage() is not available" type="integer"/>
      <deprecated value="Use DebugMemory::getPeak() instead."/>
    </docblock>
  </method>
  <method name="setMemoryPoint" start="180" end="182" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Stores a memory point in the internal tracker.">Takes a optional message name which can be used to identify the memory point.
If no message is supplied a debug_backtrace will be done to identifty the memory point.
If you don't have memory_get_xx methods this will not work.</description>
      <param description="Message to identify this memory point." type="string" variable="$message"/>
      <return type="boolean"/>
      <deprecated value="Use DebugMemory::getAll() instead."/>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getMemoryPoints" start="191" end="193" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Get all the stored memory points"/>
      <param description="Whether you want to clear the memory points as well. Defaults to false." type="boolean" variable="$clear"/>
      <return description="Array of memory marks stored so far." type="array"/>
      <deprecated value="Use DebugMemory::getAll() instead."/>
    </docblock>
    <parameter name="clear" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="clearMemoryPoints" start="201" end="203" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Clear out any existing memory points"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <deprecated value="Use DebugMemory::clear() instead."/>
    </docblock>
  </method>
  <method name="fireError" start="212" end="224" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="Create a FirePHP error message"/>
      <param description="Data of the error" type="array" variable="$data"/>
      <param description="Links for the error" type="array" variable="$links"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="links" byreference="false" type="{unknown}"/>
  </method>
<enrichments><enrichment type="build"><date unix="1397048043" date="09-04-2014" time="12:54:03" iso="2014-04-09T12:54:03+00:00" rfc="Wed, 09 Apr 2014 12:54:03 +0000"/><phpdox xmlns="http://xml.phpdox.net/src#" version="0.6.5" info="phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" generated="Generated using phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" phar="yes"><enricher type="build"/><enricher type="git"/><enricher type="checkstyle"/><enricher type="pmd"/><enricher type="phploc"/></phpdox><php xmlns="http://xml.phpdox.net/src#" version="5.3.10-1ubuntu3.11" os="Linux"><extension name="Core"/><extension name="date"/><extension name="ereg"/><extension name="libxml"/><extension name="openssl"/><extension name="pcre"/><extension name="zlib"/><extension name="bcmath"/><extension name="bz2"/><extension name="calendar"/><extension name="ctype"/><extension name="dba"/><extension name="dom"/><extension name="hash"/><extension name="fileinfo"/><extension name="filter"/><extension name="ftp"/><extension name="gettext"/><extension name="SPL"/><extension name="iconv"/><extension name="json"/><extension name="mbstring"/><extension name="pcntl"/><extension name="session"/><extension name="posix"/><extension name="readline"/><extension name="Reflection"/><extension name="standard"/><extension name="shmop"/><extension name="SimpleXML"/><extension name="soap"/><extension name="sockets"/><extension name="Phar"/><extension name="exif"/><extension name="sysvmsg"/><extension name="sysvsem"/><extension name="sysvshm"/><extension name="tokenizer"/><extension name="wddx"/><extension name="xml"/><extension name="xmlreader"/><extension name="xmlwriter"/><extension name="zip"/><extension name="PDO"/><extension name="xsl"/><extension name="mhash"/></php></enrichment><enrichment type="git"><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="f16525be325aa16218dfea4fe983ccf2a60b79b9"><author email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><commiter email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><message>wijzigingen na het aanmaken van een nieuw phpstrom project</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="287b8750eddef6446e689ccd35cee74b32cde2ed"><author email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><commiter email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><message>rechten zijn gewijzigd</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="58d361958cff9f7a6a85bed1ef717e1029d99d24"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:53:28+00:00" unixtime="1372262008"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:55:26+00:00" unixtime="1372262126"/><message>phpstorm connect?</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="ab510a8ba8b3726396604720ff22cc62d62cda63"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><message>hele hoop opgelost, ik had het eerder moeten committen :$</message></commit></enrichment></enrichments></class>
