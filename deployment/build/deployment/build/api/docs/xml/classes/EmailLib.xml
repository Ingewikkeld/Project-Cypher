<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src#" full="EmailLib" namespace="" name="EmailLib" abstract="false" final="false" start="23" end="787">
  <file path="app/Plugin/Tools/Lib" file="EmailLib.php" realpath="/home/vagrant/socsoc/app/Plugin/Tools/Lib/EmailLib.php" size="24599" time="2014-04-09T08:38:48+00:00" unixtime="1397032728" sha1="c8b62090eba806c4cf28ed2603c781d99272b1b5"/>
  <docblock>
    <description compact="Convenience class for internal mailer.">Adds some nice features and fixes some bugs:
- enbale embedded images in html mails
- allow setting domain for CLI environment (now in core)
- enable easier attachment adding
- extensive logging and error tracing
- create mails with blob attachments (embedded or attached)
TODO: cleanup and more tests</description>
    <author value="Mark Scherer"/>
    <license name="MIT"/>
    <cakephp value="2.2">2012-03-30 ms</cakephp>
  </docblock>
  <extends full="CakeEmail" namespace="" name="CakeEmail"/>
  <member name="_log" type="{unknown}" default="null" visibility="protected" line="25"/>
  <member name="_debug" type="{unknown}" default="null" visibility="protected" line="27"/>
  <member name="_error" type="{unknown}" default="null" visibility="protected" line="29"/>
  <constructor name="__construct" start="31" end="38" abstract="false" final="false" static="false" visibility="public">
    <parameter name="config" byreference="false" type="{unknown}" default="null"/>
  </constructor>
  <method name="systemEmail" start="48" end="66" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="quick way to send emails to admin App::uses() + EmailLib::systemEmail()">Note: always go out with default settings (e.g.: SMTP even if debug &gt; 0)</description>
      <return description="$success" type="object">2011-10-31 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="subject" byreference="false" type="{unknown}"/>
    <parameter name="message" byreference="false" type="string" default="'System Email'"/>
    <parameter name="transportConfig" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="layout" start="73" end="78" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param description="Layout to use (or false to use none)" type="string" variable="$layout"/>
      <return description="EmailLib" type="resource">2011-11-02 ms</return>
    </docblock>
    <parameter name="layout" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="addAttachment" start="86" end="94" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param description="absolute path" type="string" variable="$file:"/>
      <param description="(optional)" type="string" variable="$filename"/>
      <return description="EmailLib" type="resource">2011-11-02 ms</return>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}" default="null"/>
    <parameter name="fileInfo" byreference="false" type="array"/>
  </method>
  <method name="addBlobAttachment" start="104" end="113" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param description="blob data" type="object" variable="$content:">
        <type full="binary" namespace="" name="binary"/>
      </param>
      <param description="to attach it" type="string" variable="$filename"/>
      <param description="(leave it empty to get mimetype from $filename)" type="string" variable="$mimeType"/>
      <param description="(optional)" type="string" variable="$contentId"/>
      <return description="ressource EmailLib or string $contentId" type="mixed">2011-11-02 ms</return>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="mimeType" byreference="false" type="{unknown}" default="null"/>
    <parameter name="fileInfo" byreference="false" type="array"/>
  </method>
  <method name="addEmbeddedBlobAttachment" start="125" end="135" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param description="blob data" type="object" variable="$content:">
        <type full="binary" namespace="" name="binary"/>
      </param>
      <param description="to attach it" type="string" variable="$filename"/>
      <param description="(leave it empty to get mimetype from $filename)" type="string" variable="$mimeType"/>
      <param description="(optional)" type="string" variable="$contentId"/>
      <param type="array" variable="$options">- contentDisposition</param>
      <return description="ressource $EmailLib or string $contentId" type="mixed">2011-11-02 ms</return>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
    <parameter name="mimeType" byreference="false" type="{unknown}" default="null"/>
    <parameter name="contentId" byreference="false" type="{unknown}" default="null"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="addEmbeddedAttachment" start="147" end="167" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param description="absolute path" type="string" variable="$file:"/>
      <param description="(optional)" type="string" variable="$filename"/>
      <param description="(optional)" type="string" variable="$contentId"/>
      <param type="array" variable="$options">- mimetype
- contentDisposition</param>
      <return description="ressource $EmailLib or string $contentId" type="mixed">2011-11-02 ms</return>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}" default="null"/>
    <parameter name="contentId" byreference="false" type="{unknown}" default="null"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="_isEmbeddedAttachment" start="176" end="186" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Returns if this particular file has already been attached as embedded file with this exact name to prevent the same image to overwrite each other and also to only send this image once.">Allows multiple usage of the same embedded image (using the same cid)</description>
      <return description="cid of the found file or false if no such attachment can be found" type="string"/>
    </docblock>
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="name" byreference="false" type="{unknown}"/>
  </method>
  <method name="_getMime" start="188" end="199" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="filename" byreference="false" type="{unknown}"/>
  </method>
  <method name="_getMimeByExtension" start="208" end="358" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="try to find mimetype by file extension"/>
      <param description="lowercase (jpg, png, pdf, ...)" type="string" variable="$ext"/>
      <param type="string" variable="$defaultMimeType"/>
      <return description="$mimeType (falls back to )" type="string">2012-04-17 ms</return>
    </docblock>
    <parameter name="ext" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="string" default="'application/octet-stream'"/>
  </method>
  <method name="validates" start="360" end="365" abstract="false" final="false" static="false" visibility="public"/>
  <method name="_attachInlineFiles" start="375" end="406" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Attach inline/embedded files to the message."/>
      <override value="">CUSTOM FIX: blob data support</override>
      <param description="Boundary to use. If null, will default to $this-&gt;_boundary" type="string" variable="$boundary"/>
      <return description="An array of lines to add to the message" type="array"/>
    </docblock>
    <parameter name="boundary" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="_attachFiles" start="416" end="451" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Attach non-embedded files by adding file contents inside boundaries."/>
      <override value="">CUSTOM FIX: blob data support</override>
      <param description="Boundary to use. If null, will default to $this-&gt;_boundary" type="string" variable="$boundary"/>
      <return description="An array of lines to add to the message" type="array"/>
    </docblock>
    <parameter name="boundary" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="attachments" start="490" end="519" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add attachments to the email message"/>
      <override value="">CUSTOM FIX: blob data support

Attachments can be defined in a few forms depending on how much control you need:

Attach a single file:

{{{
$email-&gt;attachments('path/to/file');
}}}

Attach a file with a different filename:

{{{
$email-&gt;attachments(array('custom_name.txt' =&gt; 'path/to/file.txt'));
}}}

Attach a file and specify additional properties:

{{{
$email-&gt;attachments(array('custom_name.png' =&gt; array(
	'file' =&gt; 'path/to/file',
	'mimetype' =&gt; 'image/png',
	'contentId' =&gt; 'abc123'
));
}}}

The `contentId` key allows you to specify an inline attachment. In your email text, you
can use `&lt;img src="cid:abc123" /&gt;` to display the image inline.</override>
      <param description="String with the filename or array with filenames" type="mixed" variable="$attachments"/>
      <return description="Either the array of attachments when getting or $this when setting." type="mixed"/>
      <throws type="object">
        <type full="SocketException" namespace="" name="SocketException"/>
      </throws>
    </docblock>
    <parameter name="attachments" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="getHeaders" start="541" end="606" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get list of headers"/>
      <override value="">CUSTOM FIX: message id correctly set in CLI and can be passed in via domain()

### Includes:

- `from`
- `replyTo`
- `readReceipt`
- `returnPath`
- `to`
- `cc`
- `bcc`
- `subject`</override>
      <param type="array" variable="$include"/>
      <return type="array"/>
    </docblock>
    <parameter name="include" byreference="false" type="array"/>
  </method>
  <method name="_applyConfig" start="617" end="663" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Apply the config to an instance"/>
      <param description="CakeEmail" type="object" variable="$obj">
        <type full="CakeEmail" namespace="" name="CakeEmail"/>
      </param>
      <param type="array" variable="$config"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
      <throws description="When configuration file cannot be found, or is missing" type="object">the named config.<type full="ConfigureException" namespace="" name="ConfigureException"/></throws>
    </docblock>
    <parameter name="config" byreference="false" type="{unknown}"/>
  </method>
  <method name="send" start="674" end="712" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set the body of the mail as we send it.">Note: the text can be an array, each element will appear as a seperate line in the message body.

LEAVE empty if you use $this-&gt;set() in combination with templates</description>
      <param type="object" variable="message">
        <type full="string/array:" namespace="" name="string/array:"/>
      </param>
      <return description="$success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="message" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="prep images for inline" line="686"/>
      <comment value="if ($this-&gt;_emailFormat !== 'text') {" line="687"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="if ($message !== null) {" line="688"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="$message = $this-&gt;_prepMessage($message);" line="689"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="} else {" line="690"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="$this-&gt;_htmlMessage = $this-&gt;_prepMessage($this-&gt;_htmlMessage);" line="691"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="}" line="692"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="}" line="693"/>
    </inline>
  </method>
  <method name="_prepMessage" start="714" end="717" abstract="false" final="false" static="false" visibility="protected">
    <parameter name="text" byreference="false" type="{unknown}"/>
  </method>
  <method name="getError" start="724" end="726" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the error if existent"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="getDebug" start="733" end="735" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns the debug content returned by send()"/>
      <return type="string"/>
    </docblock>
  </method>
  <method name="_logEmail" start="741" end="756" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Logs Email to type email"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="append" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="resetAndSet" start="758" end="785" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="$this-&gt;reset();" line="759"/>
    </inline>
  </method>
  <extender full="TestEmailLib" namespace="" name="TestEmailLib"/>
<enrichments><enrichment type="build"><date unix="1397048043" date="09-04-2014" time="12:54:03" iso="2014-04-09T12:54:03+00:00" rfc="Wed, 09 Apr 2014 12:54:03 +0000"/><phpdox xmlns="http://xml.phpdox.net/src#" version="0.6.5" info="phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" generated="Generated using phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" phar="yes"><enricher type="build"/><enricher type="git"/><enricher type="checkstyle"/><enricher type="pmd"/><enricher type="phploc"/></phpdox><php xmlns="http://xml.phpdox.net/src#" version="5.3.10-1ubuntu3.11" os="Linux"><extension name="Core"/><extension name="date"/><extension name="ereg"/><extension name="libxml"/><extension name="openssl"/><extension name="pcre"/><extension name="zlib"/><extension name="bcmath"/><extension name="bz2"/><extension name="calendar"/><extension name="ctype"/><extension name="dba"/><extension name="dom"/><extension name="hash"/><extension name="fileinfo"/><extension name="filter"/><extension name="ftp"/><extension name="gettext"/><extension name="SPL"/><extension name="iconv"/><extension name="json"/><extension name="mbstring"/><extension name="pcntl"/><extension name="session"/><extension name="posix"/><extension name="readline"/><extension name="Reflection"/><extension name="standard"/><extension name="shmop"/><extension name="SimpleXML"/><extension name="soap"/><extension name="sockets"/><extension name="Phar"/><extension name="exif"/><extension name="sysvmsg"/><extension name="sysvsem"/><extension name="sysvshm"/><extension name="tokenizer"/><extension name="wddx"/><extension name="xml"/><extension name="xmlreader"/><extension name="xmlwriter"/><extension name="zip"/><extension name="PDO"/><extension name="xsl"/><extension name="mhash"/></php></enrichment><enrichment type="git"><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="f16525be325aa16218dfea4fe983ccf2a60b79b9"><author email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><commiter email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><message>wijzigingen na het aanmaken van een nieuw phpstrom project</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="287b8750eddef6446e689ccd35cee74b32cde2ed"><author email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><commiter email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><message>rechten zijn gewijzigd</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="58d361958cff9f7a6a85bed1ef717e1029d99d24"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:53:28+00:00" unixtime="1372262008"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:55:26+00:00" unixtime="1372262126"/><message>phpstorm connect?</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="ab510a8ba8b3726396604720ff22cc62d62cda63"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><message>hele hoop opgelost, ik had het eerder moeten committen :$</message></commit></enrichment></enrichments></class>
