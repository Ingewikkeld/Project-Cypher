<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src#" full="Pheanstalk_Pheanstalk" namespace="" name="Pheanstalk_Pheanstalk" abstract="false" final="false" start="14" end="535">
  <file path="app/Plugin/Queue/Lib/pheanstalk/classes/Pheanstalk" file="Pheanstalk.php" realpath="/home/vagrant/socsoc/app/Plugin/Queue/Lib/pheanstalk/classes/Pheanstalk/Pheanstalk.php" size="15495" time="2014-04-09T08:38:48+00:00" unixtime="1397032728" sha1="6dd32a2bda468cb3fb361ddbbaabc94b75712d56"/>
  <docblock>
    <description compact="Pheanstalk is a pure PHP 5.2+ client for the beanstalkd workqueue.">The Pheanstalk class is a simple facade for the various underlying components.</description>
    <see value="http://github.com/kr/beanstalkd"/>
    <see value="http://xph.us/software/beanstalkd/"/>
    <author value="Paul Annesley"/>
    <package value="Pheanstalk"/>
    <licence value="http://www.opensource.org/licenses/mit-license.php"/>
  </docblock>
  <constant name="DEFAULT_PORT" value="11300"/>
  <constant name="DEFAULT_DELAY" value="0"/>
  <constant name="DEFAULT_PRIORITY" value="1024"/>
  <constant name="DEFAULT_TTR" value="60"/>
  <constant name="DEFAULT_TUBE" value="'default'"/>
  <member name="_connection" type="{unknown}" visibility="private" line="22"/>
  <member name="_using" type="{unknown}" default="self::DEFAULT_TUBE" visibility="private" line="23"/>
  <member name="_watching" type="array" visibility="private" line="24"/>
  <constructor name="__construct" start="31" end="34" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param type="string" variable="$host"/>
      <param type="int" variable="$port"/>
      <param type="int" variable="$connectTimeout"/>
    </docblock>
    <parameter name="host" byreference="false" type="{unknown}"/>
    <parameter name="port" byreference="false" type="{unknown}" default="self::DEFAULT_PORT"/>
    <parameter name="connectTimeout" byreference="false" type="{unknown}" default="null"/>
  </constructor>
  <method name="setConnection" start="40" end="44" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param type="object">
        <type full="Pheanstalk_Connection" namespace="" name="Pheanstalk_Connection"/>
      </param>
      <chainable value=""/>
    </docblock>
    <parameter name="connection" byreference="false" type="{unknown}"/>
  </method>
  <method name="bury" start="54" end="57" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Puts a job into a 'buried' state, revived only by 'kick' command."/>
      <param type="object" variable="$job">
        <type full="Pheanstalk_Job" namespace="" name="Pheanstalk_Job"/>
      </param>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="job" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="{unknown}" default="self::DEFAULT_PRIORITY"/>
  </method>
  <method name="delete" start="65" end="69" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Permanently deletes a job."/>
      <param description="Pheanstalk_Job" type="object" variable="$job"/>
      <chainable value=""/>
    </docblock>
    <parameter name="job" byreference="false" type="{unknown}"/>
  </method>
  <method name="ignore" start="80" end="87" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Remove the specified tube from the watchlist.">Does not execute an IGNORE command if the specified tube is not in the
cached watchlist.</description>
      <param type="string" variable="$tube"/>
      <chainable value=""/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}"/>
  </method>
  <method name="kick" start="97" end="101" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Kicks buried or delayed jobs into a 'ready' state.">If there are buried jobs, it will kick up to $max of them.
Otherwise, it will kick up to $max delayed jobs.</description>
      <param description="The maximum jobs to kick" type="int" variable="$max"/>
      <return description="Number of jobs kicked" type="int"/>
    </docblock>
    <parameter name="max" byreference="false" type="{unknown}"/>
  </method>
  <method name="listTubes" start="108" end="113" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The names of all tubes on the server."/>
      <return type="array"/>
    </docblock>
  </method>
  <method name="listTubesWatched" start="124" end="134" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The names of the tubes being watched, to reserve jobs from.">Returns the cached watchlist if $askServer is false (the default),
or queries the server for the watchlist if $askServer is true.</description>
      <param type="object" variable="$askServer">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="array"/>
    </docblock>
    <parameter name="askServer" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="listTubeUsed" start="146" end="156" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="The name of the current tube used for publishing jobs to.">Returns the cached value if $askServer is false (the default),
or queries the server for the currently used tube if $askServer
is true.</description>
      <param type="object" variable="$askServer">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="string"/>
    </docblock>
    <parameter name="askServer" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="pauseTube" start="165" end="169" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Temporarily prevent jobs being reserved from the given tube."/>
      <param description="The tube to pause" type="string" variable="$tube"/>
      <param description="Seconds before jobs may be reserved from this queue." type="int" variable="$delay"/>
      <chainable value=""/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}"/>
    <parameter name="delay" byreference="false" type="{unknown}"/>
  </method>
  <method name="peek" start="177" end="184" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Inspect a job in the system, regardless of what tube it is in."/>
      <param type="int" variable="$jobId"/>
      <return description="Pheanstalk_Job" type="object"/>
    </docblock>
    <parameter name="jobId" byreference="false" type="{unknown}"/>
  </method>
  <method name="peekReady" start="193" end="204" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Inspect the next ready job in the specified tube. If no tube is specified, the currently used tube in used."/>
      <param type="string" variable="$tube"/>
      <return description="Pheanstalk_Job" type="object"/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="peekDelayed" start="213" end="224" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Inspect the shortest-remaining-delayed job in the specified tube. If no tube is specified, the currently used tube in used."/>
      <param type="string" variable="$tube"/>
      <return description="Pheanstalk_Job" type="object"/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="peekBuried" start="233" end="244" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Inspect the next job in the list of buried jobs of the specified tube.">If no tube is specified, the currently used tube in used.</description>
      <param type="string" variable="$tube"/>
      <return description="Pheanstalk_Job" type="object"/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="put" start="255" end="267" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Puts a job on the queue."/>
      <param description="The job data" type="string" variable="$data"/>
      <param description="From 0 (most urgent) to 0xFFFFFFFF (least urgent)" type="int" variable="$priority"/>
      <param description="Seconds to wait before job becomes ready" type="int" variable="$delay"/>
      <param description="Time To Run: seconds a job can be reserved for" type="int" variable="$ttr"/>
      <return description="The new job ID" type="int"/>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="{unknown}" default="self::DEFAULT_PRIORITY"/>
    <parameter name="delay" byreference="false" type="{unknown}" default="self::DEFAULT_DELAY"/>
    <parameter name="ttr" byreference="false" type="{unknown}" default="self::DEFAULT_TTR"/>
  </method>
  <method name="putInTube" start="283" end="294" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Puts a job on the queue using specified tube.">Using this method is equivalent to calling useTube() then put(), with
the added benefit that it will not execute the USE command if the client
is already using the specified tube.</description>
      <param description="The tube to use" type="string" variable="$tube"/>
      <param description="The job data" type="string" variable="$data"/>
      <param description="From 0 (most urgent) to 0xFFFFFFFF (least urgent)" type="int" variable="$priority"/>
      <param description="Seconds to wait before job becomes ready" type="int" variable="$delay"/>
      <param description="Time To Run: seconds a job can be reserved for" type="int" variable="$ttr"/>
      <return description="The new job ID" type="int"/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="{unknown}" default="self::DEFAULT_PRIORITY"/>
    <parameter name="delay" byreference="false" type="{unknown}" default="self::DEFAULT_DELAY"/>
    <parameter name="ttr" byreference="false" type="{unknown}" default="self::DEFAULT_TTR"/>
  </method>
  <method name="release" start="307" end="318" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Puts a reserved job back into the ready queue.">Marks the jobs state as "ready" to be run by any client.
It is normally used when the job fails because of a transitory error.</description>
      <param description="Pheanstalk_Job" type="object" variable="$job"/>
      <param description="From 0 (most urgent) to 0xFFFFFFFF (least urgent)" type="int" variable="$priority"/>
      <param description="Seconds to wait before job becomes ready" type="int" variable="$delay"/>
      <chainable value=""/>
    </docblock>
    <parameter name="job" byreference="false" type="{unknown}"/>
    <parameter name="priority" byreference="false" type="{unknown}" default="self::DEFAULT_PRIORITY"/>
    <parameter name="delay" byreference="false" type="{unknown}" default="self::DEFAULT_DELAY"/>
  </method>
  <method name="reserve" start="333" end="349" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reserves/locks a ready job in a watched tube.">A non-null timeout uses the 'reserve-with-timeout' instead of 'reserve'.

A timeout value of 0 will cause the server to immediately return either a
response or TIMED_OUT.  A positive value of timeout will limit the amount of
time the client will block on the reserve request until a job becomes
available.</description>
      <param type="int" variable="$timeout"/>
      <return description="Pheanstalk_Job" type="object"/>
    </docblock>
    <parameter name="timeout" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="reserveFromTube" start="370" end="374" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reserves/locks a ready job from the specified tube.">A non-null timeout uses the 'reserve-with-timeout' instead of 'reserve'.

A timeout value of 0 will cause the server to immediately return either a
response or TIMED_OUT.  A positive value of timeout will limit the amount of
time the client will block on the reserve request until a job becomes
available.

Using this method is equivalent to calling watch(), ignore() then
reserve(), with the added benefit that it will not execute uneccessary
WATCH or IGNORE commands if the client is already watching the
specified tube.</description>
      <param type="string" variable="$tube"/>
      <param type="int" variable="$timeout"/>
      <return description="Pheanstalk_Job" type="object"/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}"/>
    <parameter name="timeout" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="statsJob" start="382" end="385" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gives statistical information about the specified job if it exists."/>
      <param description="or int $job" type="object">
        <type full="Pheanstalk_Job" namespace="" name="Pheanstalk_Job"/>
      </param>
      <return type="object"/>
    </docblock>
    <parameter name="job" byreference="false" type="{unknown}"/>
  </method>
  <method name="statsTube" start="393" end="396" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gives statistical information about the specified tube if it exists."/>
      <param type="string" variable="$tube"/>
      <return type="object"/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}"/>
  </method>
  <method name="stats" start="403" end="406" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Gives statistical information about the beanstalkd system as a whole."/>
      <return type="object"/>
    </docblock>
  </method>
  <method name="touch" start="419" end="423" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Allows a worker to request more time to work on a job.">This is useful for jobs that potentially take a long time, but you still want
the benefits of a TTR pulling a job away from an unresponsive worker.  A worker
may periodically tell the server that it's still alive and processing a job
(e.g. it may do this on DEADLINE_SOON).</description>
      <param type="object" variable="$job">
        <type full="Pheanstalk_Job" namespace="" name="Pheanstalk_Job"/>
      </param>
      <chainable value=""/>
    </docblock>
    <parameter name="job" byreference="false" type="{unknown}"/>
  </method>
  <method name="useTube" start="435" end="442" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Change to the specified tube name for publishing jobs to.">This method would be called 'use' if it were not a PHP reserved word.

Does not execute a USE command if the client is already using the
specified tube.</description>
      <param type="string" variable="$tube"/>
      <chainable value=""/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}"/>
  </method>
  <method name="watch" start="453" end="460" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add the specified tube to the watchlist, to reserve jobs from.">Does not execute a WATCH command if the client is already watching the
specified tube.</description>
      <param type="string" variable="$tube"/>
      <chainable value=""/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}"/>
  </method>
  <method name="watchOnly" start="469" end="479" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Adds the specified tube to the watchlist, to reserve jobs from, and ignores any other tubes remaining on the watchlist."/>
      <param type="string" variable="$tube"/>
      <chainable value=""/>
    </docblock>
    <parameter name="tube" byreference="false" type="{unknown}"/>
  </method>
  <method name="_dispatch" start="492" end="502" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Dispatches the specified command to the connection object.">If a SocketException occurs, the connection is reset, and the command is
re-attempted once.</description>
      <param type="object" variable="$command">
        <type full="Pheanstalk_Command" namespace="" name="Pheanstalk_Command"/>
      </param>
      <return type="object">
        <type full="Pheanstalk_Response" namespace="" name="Pheanstalk_Response"/>
      </return>
    </docblock>
    <parameter name="command" byreference="false" type="{unknown}"/>
  </method>
  <method name="_reconnect" start="508" end="534" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Creates a new connection object, based on the existing connection object, and re-establishes the used tube and watchlist."/>
    </docblock>
  </method>
<enrichments><enrichment type="build"><date unix="1397048043" date="09-04-2014" time="12:54:03" iso="2014-04-09T12:54:03+00:00" rfc="Wed, 09 Apr 2014 12:54:03 +0000"/><phpdox xmlns="http://xml.phpdox.net/src#" version="0.6.5" info="phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" generated="Generated using phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" phar="yes"><enricher type="build"/><enricher type="git"/><enricher type="checkstyle"/><enricher type="pmd"/><enricher type="phploc"/></phpdox><php xmlns="http://xml.phpdox.net/src#" version="5.3.10-1ubuntu3.11" os="Linux"><extension name="Core"/><extension name="date"/><extension name="ereg"/><extension name="libxml"/><extension name="openssl"/><extension name="pcre"/><extension name="zlib"/><extension name="bcmath"/><extension name="bz2"/><extension name="calendar"/><extension name="ctype"/><extension name="dba"/><extension name="dom"/><extension name="hash"/><extension name="fileinfo"/><extension name="filter"/><extension name="ftp"/><extension name="gettext"/><extension name="SPL"/><extension name="iconv"/><extension name="json"/><extension name="mbstring"/><extension name="pcntl"/><extension name="session"/><extension name="posix"/><extension name="readline"/><extension name="Reflection"/><extension name="standard"/><extension name="shmop"/><extension name="SimpleXML"/><extension name="soap"/><extension name="sockets"/><extension name="Phar"/><extension name="exif"/><extension name="sysvmsg"/><extension name="sysvsem"/><extension name="sysvshm"/><extension name="tokenizer"/><extension name="wddx"/><extension name="xml"/><extension name="xmlreader"/><extension name="xmlwriter"/><extension name="zip"/><extension name="PDO"/><extension name="xsl"/><extension name="mhash"/></php></enrichment><enrichment type="git"><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="f16525be325aa16218dfea4fe983ccf2a60b79b9"><author email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><commiter email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><message>wijzigingen na het aanmaken van een nieuw phpstrom project</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="287b8750eddef6446e689ccd35cee74b32cde2ed"><author email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><commiter email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><message>rechten zijn gewijzigd</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="e77a82de1468025cd32f6eb867ad40d71cc50ab8"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-07-10T14:33:53+00:00" unixtime="1373466833"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-07-10T14:33:53+00:00" unixtime="1373466833"/><message>beanstalkd en pheanstalk toegevoegd (again)</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="512eddb40e59de7b26dc75edad1ed769d234b3e3"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-07-09T18:06:49+00:00" unixtime="1373393209"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-07-09T18:06:49+00:00" unixtime="1373393209"/><message>pheanstalk en beanstalkd toegevoegd</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="58d361958cff9f7a6a85bed1ef717e1029d99d24"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:53:28+00:00" unixtime="1372262008"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:55:26+00:00" unixtime="1372262126"/><message>phpstorm connect?</message></commit></enrichment></enrichments></class>
