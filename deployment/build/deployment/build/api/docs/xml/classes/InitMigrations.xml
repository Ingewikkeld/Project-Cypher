<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src#" full="InitMigrations" namespace="" name="InitMigrations" abstract="false" final="false" start="2" end="61">
  <file path="app/Plugin/migrations/Config/Migration" file="001_init_migrations.php" realpath="/home/vagrant/socsoc/app/Plugin/migrations/Config/Migration/001_init_migrations.php" size="1374" time="2014-04-09T08:38:48+00:00" unixtime="1397032728" sha1="021931a97ce422c48394c3d1c4730e43d80e31a2"/>
  <extends full="CakeMigration" namespace="" name="CakeMigration"/>
  <member name="description" type="string" default="'Init migrations tables'" visibility="public" line="10">
    <docblock>
      <description compact="Migration description"/>
      <var type="string"/>
      <access value="public"/>
    </docblock>
  </member>
  <member name="migration" type="array" visibility="public" line="18">
    <docblock>
      <description compact="Actions to be performed"/>
      <var description="$migration" type="array"/>
      <access value="public"/>
    </docblock>
  </member>
  <method name="before" start="46" end="48" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Before migration callback"/>
      <param description="up or down direction of migration process" type="string" variable="$direction"/>
      <return description="Should process continue" type="boolean"/>
      <access value="public"/>
    </docblock>
    <parameter name="direction" byreference="false" type="{unknown}"/>
  </method>
  <method name="after" start="57" end="59" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="After migration callback"/>
      <param description="up or down direction of migration process" type="string" variable="$direction"/>
      <return description="Should process continue" type="boolean"/>
      <access value="public"/>
    </docblock>
    <parameter name="direction" byreference="false" type="{unknown}"/>
  </method>
  <parent full="CakeMigration" namepsace="" name="CakeMigration">
    <extends full="Object" namespace="" name="Object"/>
    <member name="description" type="string" default="''" visibility="public" line="32">
      <docblock>
        <description compact="Migration description"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="dependencies" type="array" visibility="public" line="40">
      <docblock>
        <description compact="Migration dependencies"/>
        <var type="array"/>
        <access value="public"/>
      </docblock>
    </member>
    <member name="info" type="{unknown}" default="null" visibility="public" line="54">
      <docblock>
        <description compact="Migration information">This variable will be set while the migration is running and contains:
- `name` - File name without extension
- `class` - Class name
- `version` - What version represent on mapping
- `type` - Can be 'app' or a plugin name
- `migrated` - Datetime of when it was applied, or null</description>
        <var type="array"/>
      </docblock>
    </member>
    <member name="migration" type="array" visibility="public" line="61">
      <docblock>
        <description compact="Actions to be performed"/>
        <var description="$migration" type="array"/>
      </docblock>
    </member>
    <member name="direction" type="{unknown}" default="null" visibility="public" line="71">
      <docblock>
        <description compact="Running direction"/>
        <var description="$direction" type="string"/>
      </docblock>
    </member>
    <member name="connection" type="string" default="'default'" visibility="public" line="78">
      <docblock>
        <description compact="Connection used"/>
        <var type="string"/>
      </docblock>
    </member>
    <member name="db" type="{unknown}" default="null" visibility="public" line="85">
      <docblock>
        <description compact="DataSource used"/>
        <var type="object">
          <type full="DboSource" namespace="" name="DboSource"/>
        </var>
      </docblock>
    </member>
    <member name="Version" type="{unknown}" default="null" visibility="public" line="92">
      <docblock>
        <description compact="MigrationVersion instance"/>
        <var type="object">
          <type full="MigrationVersion" namespace="" name="MigrationVersion"/>
        </var>
      </docblock>
    </member>
    <member name="Schema" type="{unknown}" default="null" visibility="public" line="99">
      <docblock>
        <description compact="CakeSchema instance"/>
        <var type="object">
          <type full="CakeSchema" namespace="" name="CakeSchema"/>
        </var>
      </docblock>
    </member>
    <member name="callback" type="{unknown}" default="null" visibility="public" line="106">
      <docblock>
        <description compact="Callback class that will be called before/after every action"/>
        <var type="object"/>
      </docblock>
    </member>
    <member name="Precheck" type="{unknown}" default="null" visibility="public" line="113">
      <docblock>
        <description compact="Precheck object executed before db updated"/>
        <var type="object">
          <type full="PrecheckBase" namespace="" name="PrecheckBase"/>
        </var>
      </docblock>
    </member>
    <member name="dry" type="{unknown}" default="false" visibility="public" line="123">
      <docblock>
        <description compact="Should the run be dry or not.">If try, the SQL will be outputted to screen rather than
applied to the database</description>
        <var type="boolean"/>
      </docblock>
    </member>
    <member name="log" type="array" visibility="public" line="132">
      <docblock>
        <description compact="Log of SQL queries generated">This is used for dry run</description>
        <var type="array"/>
      </docblock>
    </member>
    <method name="before" start="140" end="142" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Before migration callback"/>
        <param description="up or down direction of migration process" type="string" variable="$direction"/>
        <return description="Should process continue" type="boolean"/>
      </docblock>
      <parameter name="direction" byreference="false" type="{unknown}"/>
    </method>
    <method name="after" start="150" end="152" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="After migration callback"/>
        <param description="up or down direction of migration process" type="string" variable="$direction"/>
        <return description="Should process continue" type="boolean"/>
      </docblock>
      <parameter name="direction" byreference="false" type="{unknown}"/>
    </method>
    <method name="logQuery" start="160" end="162" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Log a dry run SQL query"/>
        <param type="object" variable="$sql">
          <type full="str" namespace="" name="str"/>
        </param>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="sql" byreference="false" type="{unknown}"/>
    </method>
    <method name="getQueryLog" start="169" end="171" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Get the SQL query log"/>
        <return type="array"/>
      </docblock>
    </method>
    <constructor name="__construct" start="178" end="223" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Constructor"/>
        <param description="optional load object properties" type="array" variable="$options"/>
      </docblock>
      <parameter name="options" byreference="false" type="array"/>
    </constructor>
    <method name="run" start="232" end="261" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Run migration"/>
        <param description="up or down direction of migration process" type="string" variable="$direction"/>
        <return description="Status of the process" type="boolean"/>
        <throws type="object">
          <type full="MigrationException" namespace="" name="MigrationException"/>
        </throws>
      </docblock>
      <parameter name="direction" byreference="false" type="{unknown}"/>
    </method>
    <method name="_run" start="269" end="312" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Run migration commands"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
        <throws type="object">
          <type full="MigrationException" namespace="" name="MigrationException"/>
        </throws>
      </docblock>
      <inline>
        <comment value="force the order of migration types" line="271"/>
      </inline>
    </method>
    <method name="migration_order" start="321" end="325" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Comparison method for sorting migration types"/>
        <param description="Type" type="string" variable="$a"/>
        <param description="Type" type="string" variable="$b"/>
        <return description="Comparison value" type="int"/>
      </docblock>
      <parameter name="a" byreference="false" type="{unknown}"/>
      <parameter name="b" byreference="false" type="{unknown}"/>
    </method>
    <method name="_createTable" start="335" end="357" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Create Table method"/>
        <param description="Type of operation to be done, in this case 'create_table'" type="string" variable="$type"/>
        <param description="List of tables to be created" type="array" variable="$tables"/>
        <return description="Return true in case of success, otherwise false" type="boolean"/>
        <throws type="object">
          <type full="MigrationException" namespace="" name="MigrationException"/>
        </throws>
      </docblock>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="tables" byreference="false" type="{unknown}"/>
    </method>
    <method name="_dropTable" start="367" end="386" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Drop Table method"/>
        <param description="Type of operation to be done, in this case 'drop_table'" type="string" variable="$type"/>
        <param description="List of tables to be dropped" type="array" variable="$tables"/>
        <return description="Return true in case of success, otherwise false" type="boolean"/>
        <throws type="object">
          <type full="MigrationException" namespace="" name="MigrationException"/>
        </throws>
      </docblock>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="tables" byreference="false" type="{unknown}"/>
    </method>
    <method name="_renameTable" start="396" end="414" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Rename Table method"/>
        <param description="Type of operation to be done, this case 'rename_table'" type="string" variable="$type"/>
        <param description="List of tables to be renamed" type="array" variable="$tables"/>
        <return description="Return true in case of success, otherwise false" type="boolean"/>
        <throws type="object">
          <type full="MigrationException" namespace="" name="MigrationException"/>
        </throws>
      </docblock>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="tables" byreference="false" type="{unknown}"/>
    </method>
    <method name="_alterTable" start="424" end="506" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Alter Table method"/>
        <param description="Type of operation to be done" type="string" variable="$type"/>
        <param description="List of tables and fields" type="array" variable="$tables"/>
        <return description="Return true in case of success, otherwise false" type="boolean"/>
        <throws type="object">
          <type full="MigrationException" namespace="" name="MigrationException"/>
        </throws>
      </docblock>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="tables" byreference="false" type="{unknown}"/>
    </method>
    <method name="_alterIndexes" start="517" end="540" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Alter Indexes method"/>
        <param description="List of indexes" type="array" variable="$indexes"/>
        <param description="Type of operation to be done" type="string" variable="$type"/>
        <param description="table name" type="string" variable="$table"/>
        <throws type="object">
          <type full="MigrationException" namespace="" name="MigrationException"/>
        </throws>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <parameter name="indexes" byreference="false" type="{unknown}"/>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="table" byreference="false" type="{unknown}"/>
    </method>
    <method name="_invokeCallbacks" start="554" end="576" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="This method will invoke the before/afterAction callbacks, it is good when you need track every action."/>
        <param description="Callback name, beforeMigration, beforeAction, afterAction" type="string" variable="$callback">or afterMigration.</param>
        <param description="Type of action. i.e: create_table, drop_table, etc." type="string" variable="$type">Or also can be the direction, for before and after Migration callbacks</param>
        <param description="Data to send to the callback" type="array" variable="$data"/>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
        <throws type="object">
          <type full="MigrationException" namespace="" name="MigrationException"/>
        </throws>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="array"/>
    </method>
    <method name="_invokePrecheck" start="589" end="598" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="This method will invoke the before/afterAction callbacks, it is good when you need track every action."/>
        <param description="Callback name, beforeMigration, beforeAction" type="string" variable="$callback">or afterMigration.</param>
        <param description="Type of action. i.e: create_table, drop_table, etc." type="string" variable="$type">Or also can be the direction, for before and after Migration callbacks</param>
        <param description="Data to send to the callback" type="array" variable="$data"/>
        <return type="boolean"/>
      </docblock>
      <parameter name="callback" byreference="false" type="{unknown}"/>
      <parameter name="type" byreference="false" type="{unknown}"/>
      <parameter name="data" byreference="false" type="array"/>
    </method>
    <method name="_clearCache" start="609" end="622" abstract="false" final="false" static="false" visibility="protected">
      <docblock>
        <description compact="Clear all caches present related to models">Before the 'after' callback method be called is needed to clear all caches.
Without it any model operations will use cached data instead of real/modified
data.</description>
        <return type="object">
          <type full="void" namespace="" name="void"/>
        </return>
      </docblock>
      <inline>
        <comment value="Clear the cache" line="610"/>
        <comment value="Refresh the model, in case something changed" line="618"/>
      </inline>
    </method>
    <method name="generateModel" start="632" end="642" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Generate a instance of model for given options"/>
        <param description="Model name to be initialized" type="string" variable="$name"/>
        <param description="Table name to be initialized" type="string" variable="$table"/>
        <param type="array" variable="$options"/>
        <return type="object">
          <type full="Model" namespace="" name="Model"/>
        </return>
      </docblock>
      <parameter name="name" byreference="false" type="{unknown}"/>
      <parameter name="table" byreference="false" type="{unknown}" default="null"/>
      <parameter name="options" byreference="false" type="array"/>
    </method>
  </parent>
<enrichments><enrichment type="build"><date unix="1397048043" date="09-04-2014" time="12:54:03" iso="2014-04-09T12:54:03+00:00" rfc="Wed, 09 Apr 2014 12:54:03 +0000"/><phpdox xmlns="http://xml.phpdox.net/src#" version="0.6.5" info="phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" generated="Generated using phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" phar="yes"><enricher type="build"/><enricher type="git"/><enricher type="checkstyle"/><enricher type="pmd"/><enricher type="phploc"/></phpdox><php xmlns="http://xml.phpdox.net/src#" version="5.3.10-1ubuntu3.11" os="Linux"><extension name="Core"/><extension name="date"/><extension name="ereg"/><extension name="libxml"/><extension name="openssl"/><extension name="pcre"/><extension name="zlib"/><extension name="bcmath"/><extension name="bz2"/><extension name="calendar"/><extension name="ctype"/><extension name="dba"/><extension name="dom"/><extension name="hash"/><extension name="fileinfo"/><extension name="filter"/><extension name="ftp"/><extension name="gettext"/><extension name="SPL"/><extension name="iconv"/><extension name="json"/><extension name="mbstring"/><extension name="pcntl"/><extension name="session"/><extension name="posix"/><extension name="readline"/><extension name="Reflection"/><extension name="standard"/><extension name="shmop"/><extension name="SimpleXML"/><extension name="soap"/><extension name="sockets"/><extension name="Phar"/><extension name="exif"/><extension name="sysvmsg"/><extension name="sysvsem"/><extension name="sysvshm"/><extension name="tokenizer"/><extension name="wddx"/><extension name="xml"/><extension name="xmlreader"/><extension name="xmlwriter"/><extension name="zip"/><extension name="PDO"/><extension name="xsl"/><extension name="mhash"/></php></enrichment><enrichment type="git"><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="ee4572070e63c2c8754f7a4dbdd57761480b4d6b"><author email="vagrant@precise32.(none)" name="vagrant" time="2013-11-19T14:52:19+00:00" unixtime="1384872739"/><commiter email="vagrant@precise32.(none)" name="vagrant" time="2013-11-19T14:52:19+00:00" unixtime="1384872739"/><message>migrations plugin geinstalleerd en eerste initiele schema(.php) gemaakt</message></commit></enrichment></enrichments></class>
