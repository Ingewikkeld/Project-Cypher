<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src#" full="MyModel" namespace="" name="MyModel" abstract="false" final="false" start="12" end="1634">
  <file path="app/Plugin/Tools/Model" file="MyModel.php" realpath="/home/vagrant/socsoc/app/Plugin/Tools/Model/MyModel.php" size="47369" time="2014-04-09T08:38:48+00:00" unixtime="1397032728" sha1="d79605defc9615f05f803c40b1d892be09eaea31"/>
  <docblock>
    <description compact="Model enhancements for Cake2"/>
    <author value="Mark Scherer"/>
    <license name="MIT">2012-02-27 ms</license>
  </docblock>
  <extends full="Model" namespace="" name="Model"/>
  <member name="recursive" type="integer" default="1" visibility="public" line="14"/>
  <member name="actsAs" type="array" visibility="public" line="16"/>
  <constructor name="__construct" start="21" end="42" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Specific Stuff"/>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}" default="false"/>
    <parameter name="table" byreference="false" type="{unknown}" default="null"/>
    <parameter name="ds" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="enable caching" line="24"/>
      <comment value="get a notice if there is an AppModel instances instead of real Models (in those cases usually a dev error!)" line="38"/>
    </inline>
  </constructor>
  <method name="deconstruct" start="52" end="137" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Deconstructs a complex data type (array or object) into a single field value.">BUGFIXED VERSION - autodetects type and allows manual override</description>
      <param description="The name of the field to be deconstructed" type="string" variable="$field"/>
      <param description="An array or object to be deconstructed into a field" type="object" variable="$data">
        <type full="array|object" namespace="" name="array|object"/>
      </param>
      <return description="The resulting data that should be assigned to a field" type="mixed"/>
    </docblock>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="type" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="try to autodetect" line="60"/>
    </inline>
  </method>
  <method name="enum" start="150" end="164" abstract="false" final="false" static="true" visibility="public">
    <docblock>
      <description compact="The main method for any enumeration, should be called statically Now also supports reordering/filtering"/>
      <link value="http://www.dereuromark.de/2010/06/24/static-enums-or-semihardcoded-attributes/"/>
      <param description="or array $keys or NULL for complete array result" type="string" variable="$value"/>
      <param description="(actual data)" type="array" variable="$options"/>
      <return description="string/array" type="mixed">static enums
2009-11-05 ms</return>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="{unknown}"/>
    <parameter name="default" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="onError" start="171" end="187" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Catch database errors before itâ€™s too late //TODO: testing 2010-11-04 ms"/>
    </docblock>
  </method>
  <method name="lastError" start="193" end="196" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <return description="Error message with error number" type="string">2010-11-06 ms</return>
    </docblock>
  </method>
  <method name="virtualFields" start="207" end="244" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="combine virtual fields with fields values of find() USAGE: $this-&gt;Model-&gt;find('all', array('fields' =&gt; $this-&gt;Model-&gt;virtualFields('full_name'))); Also adds the field to the virtualFields array of the model (for correct result) TODO: adding of fields only temperory!"/>
      <param description="to include" type="array" variable="$virtualFields">2011-10-13 ms</param>
    </docblock>
    <parameter name="fields" byreference="false" type="array"/>
  </method>
  <method name="escapeValue" start="252" end="260" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="HIGHLY EXPERIMENTAL manually escape value for updateAll() etc 2011-06-27 ms"/>
    </docblock>
    <parameter name="value" byreference="false" type="{unknown}"/>
  </method>
  <method name="value" start="267" end="270" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="HIGHLY EXPERIMENTAL"/>
      <see value="http://cakephp.lighthouseapp.com/projects/42648/tickets/1799-model-should-have-escapefield-method">2011-07-05 ms</see>
    </docblock>
    <parameter name="content" byreference="false" type="{unknown}"/>
  </method>
  <method name="up" start="285" end="316" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="TODO: move to behavior (Incremental)"/>
      <param description="id (single string)" type="mixed"/>
      <param type="object">- step (defaults to 1)
- current (if none it will get it from db)
- reset (if true, it will be set to 0)
- field (defaults to 'count')
- modify (if true if will affect modified timestamp)
- timestampField (if provided it will be filled with NOW())
2010-06-08 ms<type full="options:" namespace="" name="options:"/></param>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="customOptions" byreference="false" type="array"/>
  </method>
  <method name="_paginateCount" start="324" end="333" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="improve paginate count for &quot;normal queries&quot;"/>
      <deprecated value="?">2011-04-11 ms</deprecated>
    </docblock>
    <parameter name="conditions" byreference="false" type="{unknown}" default="null"/>
    <parameter name="recursive" byreference="false" type="integer" default="1"/>
    <parameter name="extra" byreference="false" type="array"/>
  </method>
  <method name="getNextAutoIncrement" start="342" end="350" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="return the next auto increment id from the current table UUIDs will return false"/>
      <return description="next auto increment value or False on failure" type="int"/>
    </docblock>
  </method>
  <method name="init" start="359" end="367" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="workaround for a cake bug which sets empty fields to NULL in Model::set() we cannot use if (isset() &amp;&amp; empty()) statements without this fix"/>
      <param description="(which are supposed to be present in $this-&gt;data[$this-&gt;alias])" type="array" variable="$fields"/>
      <param description="(if init should be forced, otherwise only if array_key exists)" type="object" variable="$force">2011-03-06 ms<type full="bool" namespace="" name="bool"/></param>
    </docblock>
    <parameter name="fields" byreference="false" type="array"/>
    <parameter name="force" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="saveAll" start="378" end="388" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Fix for non atomic queries (MyISAM  etc) and saveAll to still return just the boolean result Otherwise you would have to interate over all result values to find out if the save was successful."/>
      <param type="mixed" variable="$data"/>
      <param type="array" variable="$options"/>
      <return description="Success" type="object">2012-11-10 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}" default="null"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="beforeValidate" start="396" end="404" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="enables HABTM-Validation e.g. with 'rule' =&gt; array('multiple', array('min' =&gt; 2)) 2010-01-14 ms"/>
    </docblock>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="deleteCache" start="413" end="419" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param type="object">- key: functioName or other key used<type full="params" namespace="" name="params"/></param>
      <return description="Success" type="object">2010-12-02 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="key" byreference="false" type="{unknown}"/>
  </method>
  <method name="subquery" start="433" end="468" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Makes a subquery"/>
      <param description="The type o the query ('count'/'all'/'first' - first only works with some mysql versions)" type="string" variable="$type"/>
      <param description="The options array" type="array" variable="$options"/>
      <param description="You can use this intead of $options['alias'] if you want" type="string" variable="$alias"/>
      <param description="Add parenthesis before and after" type="object" variable="$parenthesise">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return description="$result sql snippet of the query to run" type="string"/>
      <modified value="Mark Scherer (cake2.x ready and improvements)"/>
      <link value="http://bakery.cakephp.org/articles/lucaswxp/2011/02/11/easy_and_simple_subquery_cakephp">2011-07-05 ms</link>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <parameter name="alias" byreference="false" type="{unknown}" default="null"/>
    <parameter name="parenthesise" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="find" start="481" end="563" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Wrapper find() to cache sql queries."/>
      <access value="public"/>
      <param type="array" variable="$conditions"/>
      <param type="array" variable="$fields"/>
      <param type="string" variable="$order"/>
      <param type="string" variable="$recursive"/>
      <return type="array">2010-12-02 ms</return>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}" default="null"/>
    <parameter name="query" byreference="false" type="array"/>
    <inline>
      <comment value="reset/delete" line="482"/>
      <comment value="custom fixes" line="498"/>
      <comment value="having and group clauses enhancement" line="511"/>
      <comment value="elseif (is_array($query) &amp;&amp; !empty($query['having'])) {" line="519"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="$ds = $this-&gt;getDataSource();" line="520"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="$having = $ds-&gt;conditions($query['having'], true, false);" line="521"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="$query['conditions'][] = '1=1 HAVING '.$having;" line="522"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="}" line="523"/>
      <comment value="find" line="526"/>
      <comment value="Without caching" line="561"/>
    </inline>
  </method>
  <method name="_find" start="583" end="671" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="This code will add formatted list functionallity to find you can easy replace the $this-&gt;Model-&gt;find('list'); with $this-&gt;Model-&gt;find('formattedlist', array('fields' =&gt; array('Model.id', 'Model.field1', 'Model.field2', 'Model.field3'), 'format' =&gt; '%s-%s %s')); and get option tag output of: Model.field1-Model.field2 Model.field3. Even better part is being able to setup your own format for the output!"/>
      <see value="http://bakery.cakephp.org/articles/view/add-formatted-lists-to-your-appmodel"/>
      <deprecated value="">added Caching
2009-12-27 ms</deprecated>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="$this-&gt;_getCachedResults($type, $options);" line="584"/>
    </inline>
  </method>
  <method name="_getCachedResults" start="692" end="715" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <deprecated value=""/>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="{unknown}"/>
  </method>
  <method name="findNeighbors" start="752" end="767" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="core-fix for multiple sort orders"/>
      <param description="'scope'=&gt;array(field order) - value is retrieved by (submitted) primary key" type="object">2009-07-25 ms
TODO: fix it
TODO: rename it to just find() or integrate it there<type full="addiotional" namespace="" name="addiotional"/></param>
    </docblock>
    <parameter name="type" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="neighbors" start="780" end="840" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param description="id only, or request array" type="mixed" variable="$id:"/>
      <param type="array" variable="$options">- filter: open/closed/none
- field (sortField, if not id)
- reverse: sortDirection (0=normalAsc/1=reverseDesc)
- displayField: ($this-&gt;displayField, if empty)</param>
      <param type="array" variable="qryOptions">- recursive (defaults to -1)
TODO: try to use core function, TRY TO ALLOW MULTIPLE SORT FIELDS</param>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="options" byreference="false" type="array"/>
    <parameter name="qryOptions" byreference="false" type="array"/>
    <inline>
      <comment value="//TODO: take out" line="814"/>
      <comment value="??? why 0 instead of 1" line="835"/>
    </inline>
  </method>
  <method name="validateKey" start="856" end="881" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="validates a primary or foreign key depending on the current schema data for this field recognizes uuid (char36) and aiid (int10 unsigned) - not yet mixed (varchar36) more useful than using numeric or notEmpty which are type specific"/>
      <param type="array" variable="$data"/>
      <param type="array" variable="$options">- allowEmpty</param>
      <return description="Success" type="object">2011-06-21 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="validateEnum" start="889" end="910" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="checks if the passed enum value is valid"/>
      <return description="Success" type="object">2010-02-09 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="enum" byreference="false" type="{unknown}" default="null"/>
    <parameter name="additionalKeys" byreference="false" type="array"/>
    <inline>
      <todo value="make static" line="902"/>
    </inline>
  </method>
  <method name="validateIdentical" start="920" end="935" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="checks if the content of 2 fields are equal Does not check on empty fields! Return TRUE even if both are empty (secure against empty in another rule)!"/>
      <return description="Success" type="object">2009-01-22 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="array"/>
    <parameter name="compareWith" byreference="false" type="{unknown}" default="null"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="cast values to string/int/float/bool if desired" line="930"/>
    </inline>
  </method>
  <method name="validateUnique" start="948" end="992" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="checks a record, if it is unique - depending on other fields in this table (transfered as array) example in model: 'rule' =&gt; array ('validateUnique', array('belongs_to_table_id','some_id','user_id')), if all keys (of the array transferred) match a record, return false, otherwise true"/>
      <param description="other fields" type="object">TODO: add possibity of deep nested validation (User -&gt; Comment -&gt; CommentCategory: UNIQUE comment_id, Comment.user_id)<type full="ARRAY" namespace="" name="ARRAY"/></param>
      <return description="Success" type="object">2010-01-30 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="fields" byreference="false" type="array"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="careful, if fields is not manually filled, the options will be the second param!!! big problem..." line="962"/>
      <comment value="add ONLY if some content is transfered (check on that first!)" line="966"/>
    </inline>
  </method>
  <method name="validateUniqueExt" start="1006" end="1034" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param type="array" variable="$data"/>
      <param type="array" variable="$options">- scope (array of other fields as scope - isUnique dependent on other fields of the table)
- batch (defaults to true, remembers previous values in order to validate batch imports)
example in model: 'rule' =&gt; array ('validateUniqueExt', array('scope'=&gt;array('belongs_to_table_id','some_id','user_id'))),
http://groups.google.com/group/cake-php/browse_thread/thread/880ee963456739ec
//TODO: test!!!</param>
      <return description="Success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
      <deprecated value="in favor of validateUnique?">2011-03-27 ms</deprecated>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="for batch" line="1014"/>
      <comment value="continue with validation" line="1021"/>
      <comment value="for batch" line="1026"/>
    </inline>
  </method>
  <method name="validateUrl" start="1048" end="1086" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Checks if a url is valid AND accessable (returns false otherwise)"/>
      <param description="full url(!) starting with http://..." type="object" variable="$data:">
        <type full="array/string" namespace="" name="array/string"/>
      </param>
      <options value="array">- allowEmpty TRUE/FALSE (TRUE: if empty =&gt; return TRUE)
- required TRUE/FALSE (TRUE: overrides allowEmpty)
- autoComplete (default: TRUE)
- deep (default: TRUE)</options>
      <return description="Success" type="object">2010-10-18 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="validation" line="1069"/>
      <comment value="same domain?" line="1073"/>
    </inline>
  </method>
  <method name="_autoCompleteUrl" start="1095" end="1102" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="prepend protocol if missing"/>
      <param type="string" variable="$url"/>
      <return description="Url" type="string">2009-02-27 ms</return>
    </docblock>
    <parameter name="url" byreference="false" type="{unknown}"/>
  </method>
  <method name="_validUrl" start="1111" end="1119" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="checks if a url is valid"/>
      <param type="string" variable="url"/>
      <return description="Success" type="object">2009-02-27 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="url" byreference="false" type="{unknown}"/>
  </method>
  <method name="validateDateTime" start="1133" end="1170" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validation of DateTime Fields (both Date and Time together)"/>
      <param type="object">- dateFormat (defaults to 'ymd')
- allowEmpty
- after/before (fieldName to validate against)
- min/max (defaults to &gt;= 1 - at least 1 minute apart)<type full="options" namespace="" name="options"/></param>
      <return description="Success" type="object">2011-03-02 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="if ($this-&gt;validateDate($date, $options) &amp;&amp; $this-&gt;validateTime($time, $options)) {" line="1149"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="return true;" line="1150"/>
      <comment xmlns="http://xml.phpdox.net/src#" value="}" line="1151"/>
      <comment value="after/before?" line="1155"/>
    </inline>
  </method>
  <method name="validateDate" start="1183" end="1213" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validation of Date fields (as the core one is buggy!!!)"/>
      <param type="object">- dateFormat (defaults to 'ymd')
- allowEmpty
- after/before (fieldName to validate against)
- min (defaults to 0 - equal is OK too)<type full="options" namespace="" name="options"/></param>
      <return description="Success" type="object">2011-03-02 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="after/before?" line="1198"/>
    </inline>
  </method>
  <method name="validateTime" start="1226" end="1251" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validation of Time fields"/>
      <param type="array" variable="$options">- timeFormat (defaults to 'hms')
- allowEmpty
- after/before (fieldName to validate against)
- min/max (defaults to &gt;= 1 - at least 1 minute apart)</param>
      <return description="Success" type="object">2011-03-02 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="after/before?" line="1237"/>
    </inline>
  </method>
  <method name="validateDateRange" start="1261" end="1263" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validation of Date Fields (&gt;= minDate &amp;&amp; &lt;= maxDate)"/>
      <param type="object">- min/max (TODO!!)
2010-01-20 ms<type full="options" namespace="" name="options"/></param>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="validateTimeRange" start="1272" end="1274" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Validation of Time Fields (&gt;= minTime &amp;&amp; &lt;= maxTime)"/>
      <param type="object">- min/max (TODO!!)
2010-01-20 ms<type full="options" namespace="" name="options"/></param>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="validateUndisposable" start="1283" end="1289" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="model validation rule for email addresses"/>
      <return description="Success" type="object">2010-01-14 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="proceed" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="isUndisposableEmail" start="1299" end="1323" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="NOW: can be set to work offline only (if server is down etc) Checks if a email is not from a garbige hoster"/>
      <param description="email (necessary)" type="string"/>
      <return description="true if valid, else false" type="boolean">2009-03-09 ms</return>
    </docblock>
    <parameter name="email" byreference="false" type="{unknown}"/>
    <parameter name="onlineMode" byreference="false" type="{unknown}" default="false"/>
    <parameter name="proceed" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="crashed with white screen of death otherwise... (if foreign page is 404)" line="1305"/>
      <comment value="trigger log" line="1315"/>
    </inline>
  </method>
  <method name="validateNotBlocked" start="1332" end="1342" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Is blocked email? //TODO: move outside of MyModel?"/>
      <return description="$ifNotBlacklisted" type="object">2009-12-22 ms<type full="bool" namespace="" name="bool"/></return>
    </docblock>
    <parameter name="params" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="App::uses('Blacklist', 'Tools.Model'" line="1335"/>
    </inline>
  </method>
  <method name="umlautsOrderFix" start="1354" end="1356" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="CAREFUL: use LIMIT due to Starker Serverlastigkeit! or CACHE it!">e.g.: 'ORDER BY ".$this-&gt;umlautsOrderFix('User.nic')." ASC'</description>
      <param description="variable (to be correctly ordered)" type="string"/>
      <deprecated value=""/>
    </docblock>
    <parameter name="var" byreference="false" type="{unknown}"/>
  </method>
  <method name="set" start="1370" end="1378" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="set + guaranteeFields! Extends the core set function (only using data!!!)"/>
      <param type="mixed" variable="$data"/>
      <param description="(optional)" type="mixed" variable="$data2"/>
      <param description="Required fields" type="array" variable="$requiredFields"/>
      <param description="Whitelist / Allowed fields" type="array" variable="$fieldList"/>
      <return type="array">2010-03-11 ms</return>
    </docblock>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="data2" byreference="false" type="{unknown}" default="null"/>
    <parameter name="requiredFields" byreference="false" type="array"/>
    <parameter name="fieldList" byreference="false" type="array"/>
  </method>
  <method name="whitelist" start="1386" end="1397" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
      <param type="array" variable="$fieldList"/>
      <param description="(optional)" type="array" variable="$data"/>
      <return type="array">2011-06-01 ms</return>
    </docblock>
    <parameter name="fieldList" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="guaranteeFields" start="1407" end="1424" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="make sure required fields exists - in order to properly validate them"/>
      <param description="field1 field2 - or field1, Model2.field1 etc" type="object">
        <type full="array:" namespace="" name="array:"/>
      </param>
      <param description="data (optional, otherwise the array with the required fields will be returned)" type="object">
        <type full="array:" namespace="" name="array:"/>
      </param>
      <return type="array">2010-03-11 ms</return>
    </docblock>
    <parameter name="requiredFields" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="requireFields" start="1435" end="1472" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="make certain fields a requirement for the form to validate (they must only be present - can still be empty, though!)"/>
      <param type="array" variable="$fieldList"/>
      <param description="(or NULL to not touch already set elements)" type="object" variable="$allowEmpty">
        <type full="bool" namespace="" name="bool"/>
      </param>
      <return type="object">2012-02-20 ms<type full="void" namespace="" name="void"/></return>
    </docblock>
    <parameter name="requiredFields" byreference="false" type="{unknown}"/>
    <parameter name="allowEmpty" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="blacklist" start="1483" end="1488" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="instead of whitelisting"/>
      <param type="array" variable="$blackList">- array: fields to blacklist
- boolean TRUE: removes all foreign_keys (_id and _key)
note: one-dimensional</param>
      <return type="array">2009-06-19 ms</return>
    </docblock>
    <parameter name="blackList" byreference="false" type="array"/>
  </method>
  <method name="get" start="1499" end="1529" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Shortcut method to find a specific entry via primary key"/>
      <param type="mixed" variable="$id"/>
      <param type="object" variable="$fields">
        <type full="string|array" namespace="" name="string|array"/>
      </param>
      <param type="array" variable="$contain"/>
      <return type="mixed">2009-11-14 ms</return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="fields" byreference="false" type="array"/>
    <parameter name="contain" byreference="false" type="array"/>
  </method>
  <method name="update" start="1538" end="1541" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Update a row with certain fields (dont use &quot;Model&quot; as super-key)"/>
      <param type="int" variable="$id"/>
      <param type="array" variable="$data"/>
      <return description="Success" type="object">2012-11-20 ms<type full="bool|array" namespace="" name="bool|array"/></return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}"/>
    <parameter name="data" byreference="false" type="{unknown}"/>
    <parameter name="validate" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="inc" start="1551" end="1555" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="automagic increasing of a field with e.g.: $this-&gt;id = ID; $this-&gt;inc('weight',3);"/>
      <deprecated value="use updateAll() instead!"/>
      <param type="string" variable="fieldname"/>
      <param description="factor: defaults to 1 (could be negative as well - if field is signed and can be &lt; 0)" type="int"/>
    </docblock>
    <parameter name="field" byreference="false" type="{unknown}"/>
    <parameter name="factor" byreference="false" type="integer" default="1"/>
  </method>
  <method name="toggleField" start="1565" end="1574" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Toggles Field (Important/Deleted/Primary etc)"/>
      <param type="object" variable="fieldName">
        <type full="STRING" namespace="" name="STRING"/>
      </param>
      <param description="id (cleaned!)" type="object">
        <type full="INT" namespace="" name="INT"/>
      </param>
      <return description="record: [Model][values],..." type="object">AJAX?
2008-11-06 ms<type full="ARRAY" namespace="" name="ARRAY"/></return>
    </docblock>
    <parameter name="fieldName" byreference="false" type="{unknown}"/>
    <parameter name="id" byreference="false" type="{unknown}"/>
  </method>
  <method name="truncate" start="1581" end="1587" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="truncate TABLE (already validated, that table exists)"/>
      <param description="table [default:FALSE = current model table]" type="string"/>
      <return description="Success" type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="table" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="recursiveSelect" start="1598" end="1604" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="recursive Dropdown Lists NEEDS tree behavior, NEEDS lft, rght, parent_id (!) //FIXME 2008-01-02 ms"/>
    </docblock>
    <parameter name="conditions" byreference="false" type="array"/>
    <parameter name="attachTree" byreference="false" type="{unknown}" default="false"/>
    <parameter name="spacer" byreference="false" type="string" default="'-- '"/>
  </method>
  <method name="generateNestedList" start="1612" end="1616" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="from http://othy.wordpress.com/2006/06/03/generatenestedlist/ NEEDS parent_id //TODO refactor for 1.2 2009-08-12 ms"/>
    </docblock>
    <parameter name="conditions" byreference="false" type="{unknown}" default="null"/>
    <parameter name="indent" byreference="false" type="string" default="'- - '"/>
  </method>
  <method name="_generateNestedList" start="1623" end="1632" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="from http://othy.wordpress.com/2006/06/03/generatenestedlist/"/>
      <protected value="">2009-08-12 ms</protected>
    </docblock>
    <parameter name="cats" byreference="false" type="{unknown}"/>
    <parameter name="indent" byreference="false" type="{unknown}"/>
    <parameter name="level" byreference="false" type="integer" default="0"/>
  </method>
  <extender full="Post" namespace="" name="Post"/>
  <extender full="AppTestModel" namespace="" name="AppTestModel"/>
<enrichments><enrichment type="build"><date unix="1397048043" date="09-04-2014" time="12:54:03" iso="2014-04-09T12:54:03+00:00" rfc="Wed, 09 Apr 2014 12:54:03 +0000"/><phpdox xmlns="http://xml.phpdox.net/src#" version="0.6.5" info="phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" generated="Generated using phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" phar="yes"><enricher type="build"/><enricher type="git"/><enricher type="checkstyle"/><enricher type="pmd"/><enricher type="phploc"/></phpdox><php xmlns="http://xml.phpdox.net/src#" version="5.3.10-1ubuntu3.11" os="Linux"><extension name="Core"/><extension name="date"/><extension name="ereg"/><extension name="libxml"/><extension name="openssl"/><extension name="pcre"/><extension name="zlib"/><extension name="bcmath"/><extension name="bz2"/><extension name="calendar"/><extension name="ctype"/><extension name="dba"/><extension name="dom"/><extension name="hash"/><extension name="fileinfo"/><extension name="filter"/><extension name="ftp"/><extension name="gettext"/><extension name="SPL"/><extension name="iconv"/><extension name="json"/><extension name="mbstring"/><extension name="pcntl"/><extension name="session"/><extension name="posix"/><extension name="readline"/><extension name="Reflection"/><extension name="standard"/><extension name="shmop"/><extension name="SimpleXML"/><extension name="soap"/><extension name="sockets"/><extension name="Phar"/><extension name="exif"/><extension name="sysvmsg"/><extension name="sysvsem"/><extension name="sysvshm"/><extension name="tokenizer"/><extension name="wddx"/><extension name="xml"/><extension name="xmlreader"/><extension name="xmlwriter"/><extension name="zip"/><extension name="PDO"/><extension name="xsl"/><extension name="mhash"/></php></enrichment><enrichment type="git"><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="f16525be325aa16218dfea4fe983ccf2a60b79b9"><author email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><commiter email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><message>wijzigingen na het aanmaken van een nieuw phpstrom project</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="287b8750eddef6446e689ccd35cee74b32cde2ed"><author email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><commiter email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><message>rechten zijn gewijzigd</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="58d361958cff9f7a6a85bed1ef717e1029d99d24"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:53:28+00:00" unixtime="1372262008"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:55:26+00:00" unixtime="1372262126"/><message>phpstorm connect?</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="ab510a8ba8b3726396604720ff22cc62d62cda63"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><message>hele hoop opgelost, ik had het eerder moeten committen :$</message></commit></enrichment></enrichments></class>
