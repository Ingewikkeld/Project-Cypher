<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src#" full="RevisionBehavior" namespace="" name="RevisionBehavior" abstract="false" final="false" start="108" end="985">
  <file path="app/Plugin/Tools/Model/Behavior" file="RevisionBehavior.php" realpath="/home/vagrant/socsoc/app/Plugin/Tools/Model/Behavior/RevisionBehavior.php" size="34360" time="2014-04-09T08:38:48+00:00" unixtime="1397032728" sha1="5b759cb8f8d492599acc4e09efc56eec43bd0d11"/>
  <docblock>
    <description compact="Revision Behavior">Revision is a solution for adding undo and other versioning functionality
to your database models. It is set up to be easy to apply to your project,
to be easy to use and not get in the way of your other model activity.
It is also intended to work well with it's sibling, LogableBehavior.

Feature list :

- Easy to install
- Automagically save revision on model save
- Able to ignore model saves which only contain certain fields
- Limit number of revisions to keep, will delete oldest
- Undo functionality (or update to any revision directly)
- Revert to a datetime (and even do so cascading)
- Get a diff model array to compare two or more revisions
- Inspect any or all revisions of a model
- Work with Tree Behavior
- Includes beforeUndelete and afterUndelete callbacks
- NEW As of 1.2 behavior will revision HABTM relationships (from one way)

Install instructions :

- Place the newest version of RevisionBehavior in your app/models/behaviors folder
- Add the behavior to AppModel (or single models if you prefer)
- Create a shadow table for each model that you want revision for.
- Behavior will gracefully do nothing for models that has behavior, without table
- If adding to an existing project, run the initializeRevisions() method once for each model.

About shadow tables :

You should make these AFTER you have baked your ordinary tables as they may interfer. By default
the tables should be named "[prefix][model_table_name]_revs" If you wish to change the suffix you may
do so in the property called $revision_suffix found bellow. Also by default the behavior expects
the revision tables to be in the same dbconfig as the model, but you may change this on a per
model basis with the useDbConfig config option.

Add the same fields as in the live table, with 3 important differences.
- The 'id' field should NOT be the primary key, nor auto increment
- Add the fields 'version_id' (int, primary key, autoincrement) and
'version_created' (datetime)
- Skipp fields that should not be saved in shadowtable (lft,right,weight for instance)

Configuration :

- 'limit' : number of revisions to keep, must be at least 2
- 'ignore' : array containing the name of fields to ignore
- 'auto' : boolean when false the behavior will NOT generate revisions in afterSave
- 'useDbConfig' : string/null Name of dbConfig to use. Null to use Model's

Limit functionality :
The shadow table will save a revision copy when it saves live data, so the newest
row in the shadow table will (in most cases) be the same as the current live data.
The exception is when the ignore field functionality is used and the live data is
updated only in those fields.

Ignore field(s) functionality :
If you wish to be able to update certain fields without generating new revisions,
you can add those fields to the configuration ignore array. Any time the behavior's
afterSave is called with just primary key and these fields, it will NOT generate
a new revision. It WILL however save these fields together with other fields when it
does save a revision. You will probably want to set up cron or otherwise call
createRevision() to update these fields at some points.

Auto functionality :
By default the behavior will insert itself into the Model's save process by implementing
beforeSave and afterSave. In afterSave, the behavior will save a new revision of the dataset
that is now the live data. If you do NOT want this automatic behavior, you may set the config
option 'auto' to false. Then the shadow table will remain empty unless you call createRevisions
manually.

HABTM revision feature :
In order to do revision on HABTM relationship, add a text field to the main model's shadow table
with the same name as the association, ie if Article habtm ArticleTag as Tag, add a field 'Tag'
to articles_revs.
NB! In version 1.2 and up to current, Using HABTM revision requires that both models uses this
behavior (even if secondary model does not have a shadow table).

1.1.1 =&gt; 1.1.2 changelog
- revisions() got new paramter: $include_current
This now defaults to false, resulting in a change from 1.1.1. See tests

1.1.6 =&gt; 1.2
- includes HABTM revision control (one way)

1.2 =&gt; 1.2.1
- api change in revertToDate, added paramter for force delete if reverting to before earliest

1.2.6 =&gt; 1.2.7
	 - api change: removed shadow(), changed revertToDate() to only recurse into related models that
are dependent when cascade is true

2.0.5 =&gt; CakePHP 2.x</description>
    <author value="Ronny Vindenes"/>
    <author value="Alexander 'alkemann' Morland"/>
    <license name="MIT"/>
    <modifed value="27. march 2009"/>
    <version value="2.0.5"/>
    <modified value="2012-07-28 Mark Scherer (2.x ready)"/>
    <cakephp value="2.x"/>
  </docblock>
  <extends full="ModelBehavior" namespace="" name="ModelBehavior"/>
  <member name="settings" type="array" visibility="public" line="116">
    <docblock>
      <description compact="Behavior settings"/>
      <access value="public"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="revision_suffix" type="string" default="'_revs'" visibility="protected" line="124">
    <docblock>
      <description compact="Shadow table prefix Only change this value if it causes table name crashes"/>
      <access value="private"/>
      <var type="string"/>
    </docblock>
  </member>
  <member name="defaults" type="array" visibility="protected" line="131">
    <docblock>
      <description compact="Defaul setting values"/>
      <access value="private"/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="oldData" type="array" visibility="protected" line="142">
    <docblock>
      <description compact="Old data, used to detect changes"/>
      <var type="array"/>
    </docblock>
  </member>
  <method name="setup" start="150" end="158" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Configure the behavior through the Model::actsAs property"/>
      <param type="object" variable="$Model"/>
      <param type="array" variable="$config"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="config" byreference="false" type="array"/>
  </method>
  <method name="createRevision" start="167" end="192" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Manually create a revision of the current record of Model-&gt;id"/>
      <example value="$this-&gt;Post-&gt;id = 5; $this-&gt;Post-&gt;createRevision();"/>
      <param type="object" variable="$Model"/>
      <return description="success" type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="diff" start="206" end="261" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns an array that maps to the Model, only with multiple values for fields that has been changed"/>
      <example value="$this-&gt;Post-&gt;id = 4; $changes = $this-&gt;Post-&gt;diff();"/>
      <example value="$this-&gt;Post-&gt;id = 4; $my_changes = $this-&gt;Post-&gt;diff(null,nul, array('conditions'=&gt;array('user_id'=&gt;4)));"/>
      <example value="$this-&gt;Post-&gt;id = 4; $difference = $this-&gt;Post-&gt;diff(45,192);"/>
      <param type="object" variable="$Model">
        <type full="Object" namespace="" name="Object"/>
      </param>
      <param type="int" variable="$from_version_id"/>
      <param type="int" variable="$to_version_id"/>
      <param type="array" variable="$options"/>
      <return type="array"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="from_version_id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="to_version_id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="initializeRevisions" start="275" end="303" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Will create a current revision of all rows in Model, if none exist.">Use this if you add the revision to a model that allready has data in
the DB.
If you have large tables or big/many fields, use $limit to reduce the
number of rows that is run at once.</description>
      <example value="$this-&gt;Post-&gt;initializeRevisions();"/>
      <param type="object" variable="$Model"/>
      <param description="number of rows to initialize in one go" type="int" variable="$limit"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="limit" byreference="false" type="integer" default="100"/>
  </method>
  <method name="init" start="312" end="330" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="saves revisions for rows matching page and limit given"/>
      <param type="object" variable="$Model"/>
      <param type="int" variable="$page"/>
      <param type="int" variable="$limit"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="page" byreference="false" type="{unknown}"/>
    <parameter name="limit" byreference="false" type="{unknown}"/>
  </method>
  <method name="newest" start="342" end="358" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Finds the newest revision, including the current one.">Use with caution, the live model may be different depending on the usage
of ignore fields.</description>
      <example value="$this-&gt;Post-&gt;id = 6; $newest_revision = $this-&gt;Post-&gt;newest();"/>
      <param type="object" variable="$Model"/>
      <param type="array" variable="$options"/>
      <return type="array"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="oldest" start="370" end="386" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find the oldest revision for the current Model-&gt;id If no limit is used on revision and revision has been enabled for the model since start, this call will return the original first record."/>
      <example value="$this-&gt;Post-&gt;id = 2; $original = $this-&gt;Post-&gt;oldest();"/>
      <param type="object" variable="$Model"/>
      <param type="array" variable="$options"/>
      <return type="array"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="previous" start="396" end="417" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Find the second newest revisions, including the current one."/>
      <example value="$this-&gt;Post-&gt;id = 6; $undo_revision = $this-&gt;Post-&gt;previous();"/>
      <param type="object" variable="$Model"/>
      <param type="array" variable="$options"/>
      <return type="array"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="options" byreference="false" type="array"/>
  </method>
  <method name="revertAll" start="428" end="476" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Revert all rows matching conditions to given date.">Model rows outside condition or not edited will not be affected. Edits since date
will be reverted and rows created since date deleted.</description>
      <param type="object" variable="$Model"/>
      <param description="'conditions','date'" type="array" variable="$options"/>
      <return description="success" type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="options" byreference="false" type="array"/>
    <inline>
      <comment value="leave model rows out side of condtions alone" line="439"/>
      <comment value="leave model rows not edited since date alone" line="440"/>
      <comment value="delete all Model rows where there are only version_created later than date" line="455"/>
      <comment value="update model rows that have version_created earlier than date to latest before date" line="468"/>
    </inline>
  </method>
  <method name="revertTo" start="487" end="506" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Revert current Model-&gt;id to the given revision id Will return false if version id is invalid or save fails"/>
      <example value="$this-&gt;Post-&gt;id = 3; $this-&gt;Post-&gt;revertTo(12);"/>
      <param type="object" variable="$Model"/>
      <param type="int" variable="$version_id"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="version_id" byreference="false" type="{unknown}"/>
  </method>
  <method name="revertToDate" start="521" end="633" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Revert to the oldest revision after the given datedate.">Will cascade to hasOne and hasMany associeted models if $cascade is true.
Will return false if no change is made on the main model</description>
      <example value="$this-&gt;Post-&gt;id = 3; $this-&gt;Post-&gt;revertToDate(date('Y-m-d H:i:s',strtotime('Yesterday')));"/>
      <example value="$this-&gt;Post-&gt;id = 4; $this-&gt;Post-&gt;revertToDate('2008-09-01',true);"/>
      <param type="object" variable="$Model"/>
      <param type="string" variable="$datetime"/>
      <param type="boolean" variable="$cascade"/>
      <param type="boolean" variable="$force_delete"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="datetime" byreference="false" type="{unknown}"/>
    <parameter name="cascade" byreference="false" type="{unknown}" default="false"/>
    <parameter name="force_delete" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="Continue with next association if no shadow model" line="530"/>
      <comment value="Check if association has dependent children" line="538"/>
      <comment value="Query live data for children" line="546"/>
      <comment value="Query shadow table for deleted children" line="553"/>
      <comment value="Revert all children" line="562"/>
      <comment value="If no previous version was found and revertToDate() was called with force_delete, then delete the live data, else leave it alone" line="574"/>
    </inline>
  </method>
  <method name="revisions" start="647" end="666" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Returns a comeplete list of revisions for the current Model-&gt;id.">The options array may include Model::find parameters to narrow down result
Alias for shadow('all', array('conditions'=&gt;array($Model-&gt;primaryKey =&gt; $Model-&gt;id)));</description>
      <example value="$this-&gt;Post-&gt;id = 4; $history = $this-&gt;Post-&gt;revisions();"/>
      <example value="$this-&gt;Post-&gt;id = 4; $today = $this-&gt;Post-&gt;revisions(array('conditions'=&gt;array('version_create &gt;'=&gt;'2008-12-10')));"/>
      <param type="object" variable="$Model"/>
      <param type="array" variable="$options"/>
      <param description="If true will include last saved (live) data" type="boolean" variable="$include_current"/>
      <return type="array"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="options" byreference="false" type="array"/>
    <parameter name="include_current" byreference="false" type="{unknown}" default="false"/>
  </method>
  <method name="undelete" start="677" end="721" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Undoes an delete by saving the last revision to the Model Will return false if this Model-&gt;id exist in the live table.">Calls Model::beforeUndelete and Model::afterUndelete</description>
      <example value="$this-&gt;Post-&gt;id = 7; $this-&gt;Post-&gt;undelete();"/>
      <param type="object" variable="$Model"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="undo" start="730" end="752" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Update to previous revision"/>
      <example value="$this-&gt;Post-&gt;id = 2; $this-&gt;Post-&gt;undo();"/>
      <param type="object" variable="$Model"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="updateRevisions" start="761" end="770" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Calls create revision for all rows matching primary key list of $idlist"/>
      <example value="$this-&gt;Model-&gt;updateRevisions(array(1,2,3));"/>
      <param type="object" variable="$Model"/>
      <param type="array" variable="$idlist"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="idlist" byreference="false" type="array"/>
  </method>
  <method name="afterDelete" start="779" end="792" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Causes revision for habtm associated models if that model does version control on their relationship. BeforeDelete identifies the related models that will need to do the revision update in afterDelete. Uses"/>
      <param type="object" variable="$Model">
        <type full="unknown_type" namespace="" name="unknown_type"/>
      </param>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="afterSave" start="802" end="886" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Will create a new revision if changes have been made in the models non-ignore fields.">Also deletes oldest revision if limit is (active and) reached.</description>
      <param type="object" variable="$Model"/>
      <param type="boolean" variable="$created"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="created" byreference="false" type="{unknown}"/>
  </method>
  <method name="beforeDelete" start="896" end="911" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Causes revision for habtm associated models if that model does version control on their relationship. BeforeDelete identifies the related models that will need to do the revision update in afterDelete."/>
      <param type="object" variable="$Model"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
    <parameter name="cascade" byreference="false" type="{unknown}" default="true"/>
  </method>
  <method name="beforeSave" start="919" end="941" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Revision uses the beforeSave callback to remember the old data for comparison in afterSave"/>
      <param type="object" variable="$Model"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
  <method name="createShadowModel" start="949" end="983" abstract="false" final="false" static="false" visibility="protected">
    <docblock>
      <description compact="Returns a generic model that maps to the current $Model's shadow table."/>
      <param type="object" variable="$Model"/>
      <return type="boolean"/>
    </docblock>
    <parameter name="Model" byreference="false" type="object">
      <type full="\\Model" namespace="\" name="Model"/>
    </parameter>
  </method>
<enrichments><enrichment type="build"><date unix="1397048043" date="09-04-2014" time="12:54:03" iso="2014-04-09T12:54:03+00:00" rfc="Wed, 09 Apr 2014 12:54:03 +0000"/><phpdox xmlns="http://xml.phpdox.net/src#" version="0.6.5" info="phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" generated="Generated using phpDox 0.6.5 - Copyright (C) 2010 - 2014 by Arne Blankerts" phar="yes"><enricher type="build"/><enricher type="git"/><enricher type="checkstyle"/><enricher type="pmd"/><enricher type="phploc"/></phpdox><php xmlns="http://xml.phpdox.net/src#" version="5.3.10-1ubuntu3.11" os="Linux"><extension name="Core"/><extension name="date"/><extension name="ereg"/><extension name="libxml"/><extension name="openssl"/><extension name="pcre"/><extension name="zlib"/><extension name="bcmath"/><extension name="bz2"/><extension name="calendar"/><extension name="ctype"/><extension name="dba"/><extension name="dom"/><extension name="hash"/><extension name="fileinfo"/><extension name="filter"/><extension name="ftp"/><extension name="gettext"/><extension name="SPL"/><extension name="iconv"/><extension name="json"/><extension name="mbstring"/><extension name="pcntl"/><extension name="session"/><extension name="posix"/><extension name="readline"/><extension name="Reflection"/><extension name="standard"/><extension name="shmop"/><extension name="SimpleXML"/><extension name="soap"/><extension name="sockets"/><extension name="Phar"/><extension name="exif"/><extension name="sysvmsg"/><extension name="sysvsem"/><extension name="sysvshm"/><extension name="tokenizer"/><extension name="wddx"/><extension name="xml"/><extension name="xmlreader"/><extension name="xmlwriter"/><extension name="zip"/><extension name="PDO"/><extension name="xsl"/><extension name="mhash"/></php></enrichment><enrichment type="git"><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="f16525be325aa16218dfea4fe983ccf2a60b79b9"><author email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><commiter email="pauledenburg@gmail.com" name="Paul Edenburg" time="2013-10-06T19:40:29+00:00" unixtime="1381088429"/><message>wijzigingen na het aanmaken van een nieuw phpstrom project</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="287b8750eddef6446e689ccd35cee74b32cde2ed"><author email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><commiter email="paul@lamp2.(none)" name="Paul Edenburg" time="2013-07-29T20:18:45+00:00" unixtime="1375129125"/><message>rechten zijn gewijzigd</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="58d361958cff9f7a6a85bed1ef717e1029d99d24"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:53:28+00:00" unixtime="1372262008"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-26T15:55:26+00:00" unixtime="1372262126"/><message>phpstorm connect?</message></commit><commit xmlns="http://xml.phpdox.net/gitlog#" sha1="ab510a8ba8b3726396604720ff22cc62d62cda63"><author email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><commiter email="paul@i2s.nl" name="Paul Edenburg" time="2013-06-14T14:30:14+00:00" unixtime="1371220214"/><message>hele hoop opgelost, ik had het eerder moeten committen :$</message></commit></enrichment></enrichments></class>
