<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://xml.phpdox.net/src#" full="UsersController" namespace="" name="UsersController" abstract="false" final="false" start="9" end="1891">
  <file path="app/Controller" file="UsersController.php" realpath="/home/vagrant/socsoc/app/Controller/UsersController.php" size="66204" time="2014-04-09T08:38:48+00:00" unixtime="1397032728" sha1="64c4df1507a7aedd3bb7f58606e9a3d48c3ec482"/>
  <docblock>
    <description compact="Users Controller"/>
    <property value="User $User"/>
  </docblock>
  <extends full="AppController" namespace="" name="AppController"/>
  <member name="components" type="array" visibility="public" line="14">
    <docblock>
      <description compact=""/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="helpers" type="array" visibility="public" line="23">
    <docblock>
      <description compact=""/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="uses" type="array" visibility="public" line="32">
    <docblock>
      <description compact=""/>
      <var type="array"/>
    </docblock>
  </member>
  <member name="error" type="string" default="''" visibility="public" line="43">
    <docblock>
      <description compact=""/>
      <var description="Contains the error message in case of an error" type="string"/>
    </docblock>
  </member>
  <member name="errors" type="array" visibility="public" line="44"/>
  <member name="records" type="array" visibility="public" line="45"/>
  <member name="girlNames" type="array" visibility="public" line="51">
    <docblock>
      <description compact="Female names are used to identify the gender of imported users"/>
      <var description="Contains a set of 'all' girlnames known to the system. Will be filled after calling readGirlNames()" type="array"/>
    </docblock>
  </member>
  <member name="lineno" type="{unknown}" visibility="public" line="57">
    <docblock>
      <description compact="Holds the current linenumber for the importing process"/>
      <var/>
    </docblock>
  </member>
  <member name="csv_header_translation" type="array" visibility="public" line="62">
    <docblock>
      <description compact=""/>
      <var description="Translates the incoming csv headers to properties of the usermodel" type="array"/>
    </docblock>
  </member>
  <method name="beforeFilter" start="85" end="110" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
    </docblock>
    <inline>
      <comment value="The functions which can be accessed without being logged in" line="89"/>
      <comment value="set a different message when an anonymous user wants to see a post" line="105"/>
    </inline>
  </method>
  <method name="_userExists" start="118" end="126" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Check whether a user exists"/>
      <param type="string" variable="$user"/>
      <return description="True when the user exists, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="user" byreference="false" type="{unknown}" default="null"/>
  </method>
  <method name="login" start="136" end="237" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Log the user in"/>
      <param type="object" variable="$returnController">
        <type full="null" namespace="" name="null"/>
      </param>
      <param type="object" variable="$returnAction">
        <type full="null" namespace="" name="null"/>
      </param>
      <param type="object" variable="$returnParam">
        <type full="null" namespace="" name="null"/>
      </param>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="returnController" byreference="false" type="{unknown}" default="null"/>
    <parameter name="returnAction" byreference="false" type="{unknown}" default="null"/>
    <parameter name="returnParam" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="the fields we want to extract for the user" line="138"/>
      <comment value="get the userrecord from the db by username or emailaddress" line="141"/>
      <comment value="incorrect username or user does not exist" line="147"/>
      <comment value="user is blocked" line="152"/>
      <comment value="write message to the log" line="154"/>
      <comment value="set up a message for the user" line="157"/>
      <comment value="redirect to the homepage" line="170"/>
      <comment value="useraccount is inactive, send the user to request an activation email" line="174"/>
      <comment value="save whether the user is an administrator in the user variable" line="181"/>
      <comment value="put the found user into the request info" line="184"/>
      <comment value="log the user in" line="187"/>
      <comment value="increment the login count" line="190"/>
      <comment value="update the last_online time" line="193"/>
      <comment value="redirect the user to the page he requested at first" line="196"/>
      <comment value="no auth redirect available, so check if we got some return parameters to reconstruct" line="202"/>
      <comment value="the url the user wants to be returned to" line="203"/>
      <comment value="no redirect available, so send them to the default" line="209"/>
      <comment value="login failed" line="214"/>
      <comment value="CakeResponse::httpcode('401');" line="215"/>
      <comment value="the important part after every post:" line="219"/>
      <comment value="user has inactive account" line="222"/>
      <comment value="tell the view the account is inactive" line="224"/>
      <comment value="Set the title for the page" line="231"/>
      <comment value="everything went fine" line="235"/>
    </inline>
  </method>
  <method name="logout" start="246" end="266" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Destroy the session data and log the user out The user will be redirected"/>
      <param type="object" variable="$redirect">
        <type full="null" namespace="" name="null"/>
      </param>
      <return type="object">
        <type full="nothing" namespace="" name="nothing"/>
      </return>
    </docblock>
    <parameter name="redirect" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="default action after logout" line="247"/>
      <comment value="redirect the user to the default logout action" line="251"/>
      <comment value="redirect the user to a specific location" line="256"/>
      <comment value="redirect the user" line="264"/>
    </inline>
  </method>
  <method name="reset" start="279" end="314" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Reset the password by the supplied token">This function is (mosten often) called upon from an activation
e-mail.
When the user enters, he needs to give a new password. After that, he
will be redirected to the login form.</description>
      <param description="The token which was set by the 'reset_password' function" type="string" variable="$token"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="when the form is submitted" line="280"/>
      <comment value="attach the behavior for passwords" line="282"/>
      <comment value="failed to set the data" line="291"/>
      <comment value="find the user by the given token" line="298"/>
      <comment value="remove the password from the request array" line="304"/>
      <comment value="Set the title for the page" line="312"/>
    </inline>
  </method>
  <method name="index" start="322" end="338" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="index method"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="retrieve all accounts" line="325"/>
      <comment value="users can only see active accounts" line="328"/>
      <comment value="Set the title for the page" line="336"/>
    </inline>
  </method>
  <method name="getInactiveUsers" start="347" end="374" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Get all inactive useraccounts of the supplied accounttype (facebook, default)"/>
      <param description="[description]" type="object" variable="$accounttype">
        <type full="[type]" namespace="" name="[type]"/>
      </param>
      <return description="[description]" type="object">
        <type full="[type]" namespace="" name="[type]"/>
      </return>
    </docblock>
    <parameter name="accounttype" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="retrieve all accounts" line="348"/>
      <comment value="remove when no valid accounttype was supplied" line="363"/>
      <comment value="get all users so they can be downloaded as .csv list (= not just first page of paginated records)" line="371"/>
    </inline>
  </method>
  <method name="inactive" start="381" end="416" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="index method"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="accounttype" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="retrieve all accounts" line="384"/>
      <comment value="add the condition for the usertype" line="388"/>
      <comment value="get all users so they can be downloaded as .csv list (= not just first page of paginated records)" line="396"/>
      <comment value="Set the title for the page" line="400"/>
      <comment value="set the name of the accounttype" line="403"/>
    </inline>
  </method>
  <method name="import" start="418" end="420" abstract="false" final="false" static="false" visibility="public"/>
  <method name="process" start="422" end="482" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="an array for holding the processed records" line="424"/>
      <comment value="an array for saving the failed userrecords" line="427"/>
      <comment value="save all the userrecords" line="430"/>
      <comment value="attach the behavior for passwords" line="433"/>
      <comment value="we only want to process userrecords which made it through validation" line="436"/>
      <comment value="validate the user record with the user model" line="443"/>
      <comment value="validation did not pass, get the validation errors" line="446"/>
      <comment value="define which properties are allowed to be set for the newly created accounts (e.g. an id cannot be set hardcoded)" line="452"/>
      <comment value="success!" line="460"/>
      <comment value="add the user id" line="462"/>
      <comment value="send an activation email" line="467"/>
      <comment value="saving went wrong" line="473"/>
    </inline>
  </method>
  <method name="readGirlNames" start="484" end="490" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="get the filename containing all the names of the females" line="485"/>
      <comment value="put the names in the array" line="488"/>
    </inline>
  </method>
  <method name="getRecordsFromCsv" start="492" end="522" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="you can only get to this action when you uploaded a csv file" line="494"/>
      <comment value="take care of uploading the file" line="500"/>
      <comment value="read in the girlnames" line="508"/>
      <comment value="parse the .csv file" line="511"/>
      <comment value="put the records in the Session" line="514"/>
      <comment value="hand the records over to the view" line="517"/>
    </inline>
  </method>
  <method name="_translateHeaders" start="532" end="561" abstract="false" final="false" static="false" visibility="private">
    <docblock>
      <description compact="Translate incoming headers (of a csv file) to the corresponding model property-names. This way, the customer can use friendly names and is not concerned about the abstract names which are used in the database."/>
      <param description="holding the headers as elements" variable="$headers" type="object">
        <type full="Array" namespace="" name="Array"/>
      </param>
      <return description="Returns an array containing the headers, but this time they're internally used headers" type="array"/>
    </docblock>
    <parameter name="headers" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="get the headers used by the system (model properties)" line="534"/>
      <comment value="get the headers used by the customer (in the csv file)" line="537"/>
      <comment value="make the header lowercase" line="541"/>
      <comment value="when the header is already in model-property-style, we don't have to do anything" line="544"/>
      <comment value="log an error when the name is not found" line="549"/>
      <comment value="translate the header" line="555"/>
      <comment value="return the translated headers" line="559"/>
    </inline>
  </method>
  <method name="validateUserRecords" start="563" end="576" abstract="false" final="false" static="false" visibility="public">
    <parameter name="users" byreference="false" type="array"/>
    <inline>
      <comment value="set the model to the current userrecord" line="565"/>
      <comment value="when userrecord validates, continue with next record" line="568"/>
      <comment value="validation did not pass, get the validation errors" line="571"/>
    </inline>
  </method>
  <method name="_getValidationErrors" start="578" end="586" abstract="false" final="false" static="false" visibility="private">
    <parameter name="errors" byreference="false" type="array"/>
  </method>
  <method name="_workCsvFile" start="588" end="676" abstract="false" final="false" static="false" visibility="private">
    <parameter name="file" byreference="false" type="{unknown}"/>
    <parameter name="first_line_contain_headers" byreference="false" type="{unknown}" default="true"/>
    <parameter name="delimiter" byreference="false" type="string" default="';'"/>
    <inline>
      <comment value="fail when the file does not exist" line="596"/>
      <comment value="open a file handler to the csv file" line="602"/>
      <comment value="import the users per record from the csv file" line="608"/>
      <comment value="set the current linenumber we're parsing" line="611"/>
      <comment value="this line contains the headers" line="614"/>
      <comment value="set an error when mandatory fields are missing" line="618"/>
      <comment value="add missing header" line="624"/>
      <comment value="increase the count for missing headers so we can add empty values" line="627"/>
      <comment value="for the missing field later in the $data variable" line="628"/>
      <comment value="$missing_headers[] = $mandatory_header;" line="629"/>
      <comment value="skip empty records" line="637"/>
      <comment value="add empty fields for missing headers" line="641"/>
      <comment value="create an associative array of headers and values" line="648"/>
      <comment value="sanitize the record (add generated values, format like a CakePHP user array and stuff)" line="651"/>
      <comment value="validate the user record with the user model" line="654"/>
      <comment value="add the record to the properties" line="657"/>
      <comment value="$success[] = $record;" line="660"/>
      <comment value="validation did not pass, get the validation errors" line="664"/>
      <comment value="add the record to the properties" line="668"/>
    </inline>
  </method>
  <method name="_sanitizeUserRecord" start="678" end="725" abstract="false" final="false" static="false" visibility="private">
    <parameter name="record" byreference="false" type="{unknown}"/>
    <inline>
      <comment value="format like a CakePHP record" line="679"/>
      <comment value="generate password" line="683"/>
      <comment value="make sure the pwd_repeat is matching the first password entry" line="688"/>
      <comment value="when no usertype is supplied, set the type to 'default'" line="691"/>
      <comment value="generate username" line="696"/>
      <comment value="username is always lowercase" line="703"/>
      <comment value="add the second emailfield" line="706"/>
      <comment value="set default gender" line="709"/>
      <comment value="when a name is known as to be female, change the gender" line="713"/>
      <comment value="get the coordinates" line="719"/>
    </inline>
  </method>
  <method name="_generateFbUsername" start="727" end="729" abstract="false" final="false" static="false" visibility="private"/>
  <method name="_generatePassword" start="742" end="777" abstract="false" final="false" static="false" visibility="private">
    <parameter name="length" byreference="false" type="integer" default="9"/>
    <parameter name="add_dashes" byreference="false" type="{unknown}" default="false"/>
    <parameter name="available_sets" byreference="false" type="string" default="'luds'"/>
  </method>
  <method name="view" start="786" end="845" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="view method"/>
      <throws type="object">
        <type full="NotFoundException" namespace="" name="NotFoundException"/>
      </throws>
      <param type="string" variable="$id"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="retrieve the user information" line="787"/>
      <comment value="users are not allowed to see blocked or inactive useraccounts" line="794"/>
      <comment value="set message for the user" line="798"/>
      <comment value="redirect the user where he came from" line="801"/>
      <comment value="set message for the user" line="806"/>
      <comment value="get all the posts for this user" line="810"/>
      <comment value="send the userdata to the view" line="838"/>
      <comment value="Set the title for the page" line="841"/>
    </inline>
  </method>
  <method name="add" start="853" end="944" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Add a new user / Register yourself as a new user"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <inline>
      <comment value="$this-&gt;Text = ClassRegistry::init('Text');" line="855"/>
      <comment value="$body = $this-&gt;Text-&gt;findByKey('fb_activatiemail');" line="856"/>
      <comment value="if( $body &amp;&amp; ! empty($body['Text']['text']) ){" line="858"/>
      <comment value="$body = $body['Text']['text'];" line="859"/>
      <comment value="}" line="860"/>
      <comment value="exit;" line="863"/>
      <comment value="Set the title for the page" line="865"/>
      <comment value="get and set the enum options for 'role'" line="869"/>
      <comment value="when the add page needs to be displayed" line="874"/>
      <comment value="do nothing more than we did already" line="876"/>
      <comment value="////////////////////" line="881"/>
      <comment value="form submitted" line="882"/>
      <comment value="////////////////////" line="883"/>
      <comment value="set the unhashed password for use in the activation e-mail" line="887"/>
      <comment value="attach the behavior for passwords" line="890"/>
      <comment value="make a shorter variable" line="893"/>
      <comment value="be sure the required fields are set" line="896"/>
      <comment value="set the object with the $data content" line="903"/>
      <comment value="get the zipcode in the correct format" line="910"/>
      <comment value="get the coordinates" line="921"/>
      <comment value="define needed variables and create user" line="924"/>
      <comment value="save the user" line="930"/>
      <comment value="send an activation email" line="933"/>
      <comment value="we shouldn't get here" line="939"/>
    </inline>
  </method>
  <method name="requestAccountActivation" start="956" end="995" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This function is an access point to the model function with the same name">After a user is logged in, an activation mail is send
with a link the user needs to click to get his account
activated</description>
      <internal>param array $data The userdata array which will be saved</internal>
      <return type="object">
        <type full="nothing" namespace="" name="nothing"/>
      </return>
    </docblock>
    <inline>
      <comment value="set the default" line="957"/>
      <comment value="you cannot request an account activation when you're logged in" line="960"/>
      <comment value="redirect to home" line="964"/>
      <comment value="let the view know the mail is not sent yet" line="968"/>
      <comment value="when the user came from the login form, the users account is not activated yet" line="971"/>
      <comment value="form is not posted, so show the form" line="976"/>
      <comment value="when the form is posted, the user requested an (extra) activation e-mail" line="981"/>
      <comment value="if no username or email has been given, raise an error" line="982"/>
      <comment value="send the user to the model where the mail will be send" line="987"/>
      <comment value="something went wrong" line="993"/>
    </inline>
  </method>
  <method name="activation_sent" start="1001" end="1004" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="After the user has been saved, he is redirected to this function"/>
    </docblock>
    <inline>
      <comment value="Set the title for the page" line="1002"/>
    </inline>
  </method>
  <method name="activateUser" start="1012" end="1034" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="An admin can activate an inactive user by using this function"/>
      <param description="Username of the user to be activated" type="string" variable="$username"/>
      <return description="True on success, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="username" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="get the user" line="1013"/>
      <comment value="set active to true" line="1019"/>
      <comment value="send an activation email" line="1029"/>
    </inline>
  </method>
  <method name="autoActivateUser" start="1044" end="1062" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This is a copy of the function 'activateUser', only this copy _does_ only return true or false and doesn't redirect the user.">This way, this function can be used by other functions.</description>
      <param description="Username of the user to be activated" type="string" variable="$username"/>
      <return description="True on success, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="username" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="get the user" line="1045"/>
      <comment value="set active to true" line="1052"/>
    </inline>
  </method>
  <method name="activate_account" start="1074" end="1137" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This action is executed when the user clicked the activation link in his email">It will search the user by the supplied token, sets the account
active and removes the token from the userrecord</description>
      <param description="The token for identifying this user's activation" type="string" variable="$token"/>
      <return type="object">
        <type full="bool|void" namespace="" name="bool|void"/>
      </return>
    </docblock>
    <parameter name="token" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="get the user" line="1080"/>
      <comment value="if the user is not found by the given token" line="1083"/>
      <comment value="$this-&gt;Session-&gt;setFlash('Invalid token', 'default', array(), 'error');" line="1085"/>
      <comment value="set 401 code for erroneous login" line="1088"/>
      <comment value="let the view know what happened" line="1091"/>
      <comment value="if the user is not found by the given token" line="1098"/>
      <comment value="$this-&gt;Session-&gt;setFlash('Invalid token', 'default', array(), 'error');" line="1100"/>
      <comment value="set 401 code for erraneous login" line="1103"/>
      <comment value="let the view know what happened" line="1106"/>
      <comment value="when variables are presented through GET" line="1113"/>
      <comment value="activate the account and delete the onetime code" line="1115"/>
      <comment value="when the user has no password, let him know he needs to request/reset his password" line="1120"/>
      <comment value="redirect the user to the reset password page" line="1124"/>
      <comment value="set the message to be shown in the bar" line="1128"/>
      <comment value="redirect to search posts" line="1131"/>
      <comment value="Set the title for the page" line="1135"/>
    </inline>
  </method>
  <method name="print_errors" start="1140" end="1144" abstract="false" final="false" static="false" visibility="public"/>
  <method name="activate_users" start="1146" end="1176" abstract="false" final="false" static="false" visibility="public">
    <inline>
      <comment value="you can only get into this function when data is posted" line="1148"/>
      <comment value="when no useraccounts have been selected" line="1153"/>
      <comment value="fill the users variable for the view" line="1159"/>
      <comment value="active the users" line="1163"/>
      <comment value="errors occurred! Print errors on screen" line="1166"/>
      <comment value="all users succesfully activated!" line="1172"/>
    </inline>
  </method>
  <method name="activate_single_user" start="1178" end="1191" abstract="false" final="false" static="false" visibility="public">
    <parameter name="username" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="activate the user" line="1181"/>
      <comment value="success!" line="1183"/>
      <comment value="an error occurred. Fill the errors property and return false" line="1187"/>
    </inline>
  </method>
  <method name="edit" start="1200" end="1295" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="edit method"/>
      <throws type="object">
        <type full="NotFoundException" namespace="" name="NotFoundException"/>
      </throws>
      <param type="string" variable="$id"/>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="get and set the enum options for 'role'" line="1201"/>
      <comment value="retrieve the user information" line="1206"/>
      <comment value="determine the relevance with facebookaction" line="1212"/>
      <comment value="set original (= from db) userdata for the view" line="1216"/>
      <comment value="get the coordinates" line="1222"/>
      <comment value="set the user id so the record will be updated, instead of created (newly/duplicated)" line="1226"/>
      <comment value="define needed variables and create user" line="1229"/>
      <comment value="you can add the username only when the username is changed" line="1234"/>
      <comment value="otherwise you'll get a warning that the username already exists" line="1235"/>
      <comment value="user is only allowed to change its username when:" line="1238"/>
      <comment value="- it's of the type USERTYPE_FACEBOOK" line="1239"/>
      <comment value="- and:" line="1240"/>
      <comment value="- the username starts with 'fb' and the rest consists of only numbers" line="1241"/>
      <comment value="allow the admin to change the username," line="1246"/>
      <comment value="do the saving" line="1251"/>
      <comment value="when the user is blocked, set a variable so that the e-mail can include a special message for it" line="1259"/>
      <comment value="now, send the email to the owner of the post" line="1264"/>
      <comment value="retrieve the (updated!) user information" line="1269"/>
      <comment value="update the AuthComponent::user data when it was the user who changed his own information" line="1275"/>
      <comment value="Set the title for the page" line="1293"/>
    </inline>
  </method>
  <method name="delete" start="1305" end="1325" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="delete method"/>
      <throws type="object">
        <type full="MethodNotAllowedException" namespace="" name="MethodNotAllowedException"/>
      </throws>
      <throws type="object">
        <type full="NotFoundException" namespace="" name="NotFoundException"/>
      </throws>
      <param type="string" variable="$id"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="retrieve the user information" line="1310"/>
    </inline>
  </method>
  <method name="ajaxdelete" start="1335" end="1359" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="ajaxdelete method"/>
      <throws type="object">
        <type full="MethodNotAllowedException" namespace="" name="MethodNotAllowedException"/>
      </throws>
      <throws type="object">
        <type full="NotFoundException" namespace="" name="NotFoundException"/>
      </throws>
      <param type="string" variable="$id"/>
      <return type="object">
        <type full="void" namespace="" name="void"/>
      </return>
    </docblock>
    <parameter name="id" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="retrieve the user information" line="1343"/>
      <comment value="throw new NotFoundException(__('Invalid user'));" line="1346"/>
      <comment value="$this-&gt;Session-&gt;setFlash(__('User deleted'), 'default', array(), 'success');" line="1353"/>
      <comment value="return $this-&gt;redirect($this-&gt;referer());" line="1354"/>
    </inline>
  </method>
  <method name="reset_password" start="1367" end="1386" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This function is used for users who want to reset their password It's this function that is public to the users"/>
    </docblock>
    <inline>
      <comment value="we need a valid e-mail address" line="1370"/>
    </inline>
  </method>
  <method name="changeAjaxPassword" start="1393" end="1463" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="This function enables the user to change its password"/>
      <return type="boolean"/>
    </docblock>
    <inline>
      <comment value="change password by ajax" line="1395"/>
      <comment value="attach the password behavior" line="1401"/>
      <comment value="check if the currentpassword is correct" line="1405"/>
      <comment value="search the user by username and password" line="1409"/>
      <comment value="When there are errors, set some vars for the view and return false" line="1414"/>
      <comment value="response to the view must be like: {&quot;errors&quot;:{&quot;user&quot;:{&quot;pwd_current&quot;:&quot;Het huidige wachtwoord is incorrect&quot;}}}" line="1415"/>
      <comment value="everything ok, change the password" line="1427"/>
      <comment value="now, send the email to the user" line="1435"/>
      <comment value="set the view variables" line="1440"/>
      <comment value="When there are errors, set some vars for the view and return false" line="1447"/>
      <comment value="pw should not be passed to the view again for security reasons" line="1456"/>
    </inline>
  </method>
  <method name="changePassword" start="1471" end="1524" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Change the password of a user"/>
      <throws type="object">
        <type full="NotFoundException" namespace="" name="NotFoundException"/>
      </throws>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <inline>
      <comment value="we can only work if there is data posted" line="1473"/>
      <comment value="attach the password behavior" line="1478"/>
      <comment value="search the user by supplied token" line="1482"/>
      <comment value="set the passwords so it can be fixed by the PasswordableBehavior" line="1488"/>
      <comment value="everything ok, change the password" line="1493"/>
      <comment value="now, send the email to the user" line="1501"/>
      <comment value="When there are errors, set some vars for the view and return false" line="1510"/>
      <comment value="pw should not be passed to the view again for security reasons" line="1518"/>
    </inline>
  </method>
  <method name="isAuthorized" start="1533" end="1563" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Set authorization for actions concerning the user with the role 'beheerder'"/>
      <param description="Array holding $user['id']" type="array" variable="$user"/>
      <return description="True when the user has the role 'beheerder', otherwise false" type="boolean"/>
    </docblock>
    <parameter name="user" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="setup the allowed actions for loggedin users" line="1536"/>
      <comment value="actions allowed for loggedin users only" line="1545"/>
      <comment value="user and admin is only allowed to edit its own information" line="1550"/>
      <comment value="user is only allowed to delete its own account" line="1555"/>
      <comment value="execute parent function" line="1561"/>
    </inline>
  </method>
  <method name="admin_blockUser" start="1573" end="1612" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Block the useraccount identified by the given user id"/>
      <param description="The unique id for the user to be blocked" type="int" variable="$user_id"/>
      <param description="A message which will be saved in the userrecord. Could be a reason why this user is being blocked. Defaults to 'Blocked by user &lt;username&gt; (&lt;id&gt;) on yyyy-mm-dd hh:mm:ss'" type="string" variable="$note"/>
      <throws type="object">
        <type full="NotFoundException" namespace="" name="NotFoundException"/>
      </throws>
      <return description="True when the user was succesfully blocked, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="user_id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="note" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="give the view the userinformation" line="1576"/>
      <comment value="actions for when the form is submitted" line="1582"/>
      <comment value="call the model function for blocking this user" line="1585"/>
      <comment value="now, send the email to the owner of the post" line="1595"/>
      <comment value="redirect the user to the users' view page" line="1606"/>
      <comment value="Set the title for the page" line="1610"/>
    </inline>
  </method>
  <method name="admin_unblockUser" start="1622" end="1659" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Unblock the useraccount identified by the given user id"/>
      <param description="The unique id for the user to be unblocked" type="int" variable="$user_id"/>
      <param description="A message which will be saved in the userrecord. Could be a reason why this user is being unblocked. Defaults to 'Unblocked by user &lt;username&gt; (&lt;id&gt;) on yyyy-mm-dd hh:mm:ss'" type="string" variable="$note"/>
      <throws type="object">
        <type full="NotFoundException" namespace="" name="NotFoundException"/>
      </throws>
      <return description="True when the user was succesfully unblocked, false otherwise" type="boolean"/>
    </docblock>
    <parameter name="user_id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="note" byreference="false" type="{unknown}" default="null"/>
    <inline>
      <comment value="give the view the userinformation" line="1625"/>
      <comment value="actions for when the form is submitted" line="1631"/>
      <comment value="call the model function for blocking this user" line="1633"/>
      <comment value="now, send the email to the owner of the post" line="1643"/>
      <comment value="redirect the user to the users' view page" line="1653"/>
      <comment value="Set the title for the page" line="1657"/>
    </inline>
  </method>
  <method name="search" start="1672" end="1698" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Search for other users">This function lets users search for other users. When the user typed in more than 3 characters, this function
will return all the usernames which contain these characters.

NB: 	'ordinary' users can only search for users which have active useraccounts and which are not blocked. Admin users
		can search for all users in the system.</description>
      <return type="object">
        <type full="bool" namespace="" name="bool"/>
      </return>
    </docblock>
    <inline>
      <comment value="at least 3 characters need to be typed" line="1674"/>
      <comment value="the typed text can be anywhere in the username" line="1679"/>
      <comment value="Ordinary users can only search for active, not-blocked users" line="1682"/>
      <comment value="if( ! $this-&gt;Auth-&gt;user('isAdmin')){" line="1683"/>
      <comment value="$conditions[] = array('User.active' =&gt; 1, 'User.blocked' =&gt; 0);" line="1684"/>
      <comment value="}" line="1685"/>
      <comment value="set the search variable which will be used for piwik in the view" line="1691"/>
      <comment value="Set the title for the page" line="1696"/>
    </inline>
  </method>
  <method name="delete_account" start="1727" end="1806" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="For users, this action will clear out most of the information and sets the account inactive. Information that will be cleared:">- firstname
- lastname
- prepositions
- dob
- password
- zipcode
- city
- housenr
- newsletter
- lon
- lat
- token

The field 'deleted'  will be filled with the current time

When '$total_destruction' is true, then the account will be deleted out of the database
as well.</description>
      <param type="string" variable="$user_id"/>
      <param type="object" variable="$total_destruction">
        <type full="bool|string" namespace="" name="bool|string"/>
      </param>
      <throws type="object">
        <type full="NotFoundException" namespace="" name="NotFoundException"/>
      </throws>
      <return type="boolean"/>
    </docblock>
    <parameter name="user_id" byreference="false" type="{unknown}" default="null"/>
    <parameter name="total_destruction" byreference="false" type="{unknown}" default="false"/>
    <inline>
      <comment value="retrieve the user information" line="1728"/>
      <comment value="actions for when the form is submitted" line="1734"/>
      <comment value="attach the behavior for passwords" line="1736"/>
      <comment value="the CakePHP core-function 'deleteAll' is not working as I would want it to, so instead" line="1739"/>
      <comment value="we're removing all the related models by hand" line="1740"/>
      <comment value="remove messages" line="1742"/>
      <comment value="some (or all) message could not be deleted" line="1744"/>
      <comment value="remove reactions" line="1750"/>
      <comment value="some (or all) message could not be deleted" line="1752"/>
      <comment value="remove images" line="1758"/>
      <comment value="$this-&gt;Image-&gt;deleteAllFrom($user_id);" line="1759"/>
      <comment value="remove posts" line="1761"/>
      <comment value="some (or all) message could not be deleted" line="1763"/>
      <comment value="when we _really_ want to delete the user from the system (admins only)" line="1769"/>
      <comment value="some (or all) message could not be deleted" line="1771"/>
      <comment value="do the deleting" line="1775"/>
      <comment value="send the user to the homepage" line="1779"/>
      <comment value="truncate user information" line="1788"/>
      <comment value="some (or all) message could not be deleted" line="1790"/>
      <comment value="Set the title for the page" line="1803"/>
    </inline>
  </method>
  <method name="account_deleted" start="1812" end="1814" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
    </docblock>
  </method>
  <method name="mysocsoc" start="1819" end="1843" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
    </docblock>
    <inline>
      <comment value="get all info for the user" line="1820"/>
      <comment value="get all the posts for this user" line="1825"/>
      <comment value="hand over the variables to the view" line="1836"/>
      <comment value="Set the title for the page" line="1841"/>
    </inline>
  </method>
  <method name="whoIsOnline" start="1848" end="1856" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact=""/>
    </docblock>
    <inline>
      <comment value="get all users who are (were) online in the last minute" line="1849"/>
    </inline>
  </method>
  <method name="autocomplete" start="1863" end="1890" abstract="false" final="false" static="false" visibility="public">
    <docblock>
      <description compact="Ajax function for retrieving usernames"/>
      <return description="json array with usernames which comply" type="string"/>
    </docblock>
    <inline>
      <comment value="we need at least 3 characters to work with" line="1870"/>
      <comment value="extract the usernames" line="1886"/>
    </inline>
  </method>
  <parent full="AppController" namepsace="" name="AppController">
    <extends full="Controller" namespace="" name="Controller"/>
    <member name="components" type="array" visibility="public" line="36"/>
    <member name="uses" type="array" visibility="public" line="56">
      <docblock>
        <description compact=""/>
      </docblock>
    </member>
    <method name="getSearchFormInfo" start="58" end="85" abstract="false" final="false" static="false" visibility="public">
      <inline>
        <comment value="get the information to build the searchform" line="59"/>
      </inline>
    </method>
    <method name="beforeRender" start="91" end="124" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This function is called before every view is displayed"/>
      </docblock>
      <inline>
        <comment value="cookies need to be accepted" line="100"/>
        <comment value="get the information needed to setup the search form on every page" line="107"/>
        <comment value="let the views know whether the user is logged in or not" line="110"/>
        <comment value="check the supported browser versions if we did not do so" line="113"/>
        <comment value="get the number of online users" line="116"/>
        <comment value="get all the rubrics so we can create hidden selectelements which can be used" line="121"/>
        <comment value="for searching and adding" line="122"/>
      </inline>
    </method>
    <method name="isBrowserOutOfDate" start="169" end="177" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact=""/>
        <param type="array" variable="$browser"/>
        <return type="object">
          <type full="bool" namespace="" name="bool"/>
        </return>
      </docblock>
      <parameter name="browser" byreference="false" type="array"/>
      <inline>
        <comment value="we didn't recognize the browser" line="174"/>
      </inline>
    </method>
    <method name="beforeFilter" start="183" end="193" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="This function is called before every action is run"/>
      </docblock>
      <inline>
        <comment value="update the last online value for the currently logged in user (if any)" line="186"/>
        <comment value="set the max upload limit" line="189"/>
      </inline>
    </method>
    <method name="isAuthorized" start="235" end="259" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Set global authorization for the application">Per-action authorization is set in the overwritten function 'isAuthorized($user)'
in the controller of a requested action.
This global function sets authorization on all actions of all controllers for users
with the role 'beheerder'</description>
        <param description="Array holding $user['id']" type="array" variable="$user"/>
        <return description="True when the user has the role 'beheerder', otherwise false" type="boolean"/>
      </docblock>
      <parameter name="user" byreference="false" type="{unknown}"/>
      <inline>
        <comment value="admin users are allowed to do everything" line="236"/>
        <comment value="admin functions are for admins only" line="241"/>
        <comment value="setup the allowed actions for loggedin users" line="247"/>
        <comment value="actions allowed for loggedin users only" line="252"/>
        <comment value="default deny access" line="257"/>
      </inline>
    </method>
    <method name="updateAuthUserInfo" start="266" end="288" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Update the information hold in the Auth component. Useful when the users' information changes (when editing user information, for example)."/>
      </docblock>
      <inline>
        <comment value="Read in the current user information out of the database" line="267"/>
        <comment value="remove the password field" line="272"/>
        <comment value="merge the auth component data with our freshly fetched info" line="277"/>
        <comment value="write the user information to the Auth component" line="283"/>
      </inline>
    </method>
    <method name="ago" start="296" end="365" abstract="false" final="false" static="true" visibility="public">
      <docblock>
        <description compact=""/>
        <param description="The time we want to break down into human readable time" type="object" variable="$time">
          <type full="unknown" namespace="" name="unknown"/>
        </param>
        <param type="object" variable="$rcs">
          <type full="int|number" namespace="" name="int|number"/>
        </param>
        <return type="string"/>
      </docblock>
      <parameter name="time" byreference="false" type="{unknown}"/>
      <parameter name="rcs" byreference="false" type="integer" default="0"/>
      <inline>
        <comment value="periods of time we have (singular)" line="300"/>
        <comment value="periods of time we have (plural)" line="312"/>
        <comment value="the length of each period of time in seconds" line="324"/>
        <comment value="loop through the supplied time" line="337"/>
        <comment value="ugly hack to prevent $countLength from getting -1" line="344"/>
        <comment value="write down the singular form of past time" line="349"/>
        <comment value="when working with plurals, change the name of the period to its plural form" line="352"/>
      </inline>
    </method>
    <method name="daysBetween" start="372" end="376" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact=""/>
        <param variable="$fromTime"/>
        <return type="float"/>
      </docblock>
      <parameter name="fromTime" byreference="false" type="{unknown}"/>
    </method>
    <method name="getBrowser" start="381" end="485" abstract="false" final="false" static="false" visibility="public">
      <docblock>
        <description compact="Browser check"/>
      </docblock>
      <inline>
        <comment value="First get the platform?" line="390"/>
        <comment value="Next get the name of the useragent yes seperately and for good reason" line="401"/>
        <comment value="finally get the correct version number" line="446"/>
        <comment value="see how many we have" line="454"/>
        <comment value="we will have two since we are not using 'other' argument yet" line="457"/>
        <comment value="see if version is before or after the name" line="458"/>
        <comment value="check if we have a number" line="470"/>
      </inline>
    </method>
  </parent>
</class>
