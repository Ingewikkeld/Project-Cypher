<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
  <duplication lines="31" tokens="71">
    <file path="/home/vagrant/socsoc/app/Model/Geo.php" line="39"/>
    <file path="/home/vagrant/socsoc/app/Model/AppModel.php" line="251"/>
    <codefragment>    public function getCoordinatesFromPostcode($zipcode = ''){
        // validate the zipcode
        if( ! $zipcode = $this-&gt;makeValidZipcode($zipcode)){
            return false;
        }
    
        // no zipcode given?
        if( $zipcode == "0000 AA" || ($zipcode[0] == "0000" &amp;&amp; $zipcode[1] == "AA")){
            return array(null, null, null);
        }
    
        // when no lettercombination is supplied, we need to search on the numbers only
        $lettercombo = '';
        if( ! empty($zipcode[1])){
            $lettercombo = sprintf('AND `lettercombinatie` = "%s"', $zipcode[1]);
        }
    
        // zipcode searching: assemble and execute the query
        $query = sprintf(
                'SELECT lat,lon,woonplaatsnaam,gemeentenaam '.
                'FROM `zipcodes`, `cities` '.
                'WHERE `wijkcode` = "%s" %s ' .
                'AND zipcodes.gemeente_id=cities.gemeente_id '.
                'LIMIT 1',
                $zipcode[0], $lettercombo
        );
    
        if( ! $coordinates = $this-&gt;query($query)){
            // the zipcode could not be found
            $strzipcode = $zipcode[0] . ' ' . $zipcode[1];
            $this-&gt;log("Zipcode ($strzipcode) not found");
</codefragment>
  </duplication>
  <duplication lines="119" tokens="157">
    <file path="/home/vagrant/socsoc/app/Model/Geo.php" line="79"/>
    <file path="/home/vagrant/socsoc/app/Model/AppModel.php" line="285"/>
    <codefragment>                return false;
            }
        }
    
        if( ! isset($coordinates[0]['cities']['gemeentenaam'])){
            $coordinates[0]['cities']['gemeentenaam'] = '';
        }
    
        return array(
                $coordinates[0]['zipcodes']['lat'],
                $coordinates[0]['zipcodes']['lon'],
                $coordinates[0]['cities']['gemeentenaam']
        );
    }
    
    
    
    /**
     * This function will return an array where the numbers
     * and letters are seperated so that you can do with it whatever
     * you like.
     *
     * When an error occurs, boolean false is returned
     *
     * Valid zipcodes can be of the following form:
     * - 0000
     * - 0000AA
     * - 0000 AA
     *
     * @param    $zipcode    string        The zipcode to be checked
     * @return                mixed        Array('numbers', 'letters') on success, Boolean false on error
     */
    public function makeValidZipcode($zipcode = ''){
        // don't allow empty values
        if( empty($zipcode)){ return false; }
    
        if( ! is_string($zipcode)){
            // wrong format has been given
            return false;
        }
    
        // remove all whitespace
        $zipcode = str_replace(' ', '', $zipcode);
    
    
        // check the length
        if(strlen($zipcode) &lt; 4){
            // zipcode is too short. We can't work with this
            return false;
        }
    
        if(strlen($zipcode) &gt; 6){
            // zipcode is too long. We'll just cut out the firs 6 characters and try again
            $zipcode = substr($zipcode, 0, 6);
        }
    
        // if between 4 and 6 characters
        if(strlen($zipcode) != 6 &amp;&amp; strlen($zipcode) &gt; 4){
            // just work with the first 4
            $zipcode = substr($zipcode, 0, 4);
        }
    
        // let's format it like: array('numbers', 'letters');
        if(
                preg_match_all("/^([0-9]{4})$/",$zipcode, $matches)            ||    // of the form '0000'
                preg_match_all("/^([0-9]{4})([A-Z]{2})$/i",$zipcode, $matches)    ||    // of the form '0000AA'
                preg_match_all("/^([0-9]{4})[\s]*([A-Z]{2})$/i",$zipcode, $matches)    // of the form '0000 AA'
        ){
            // check which was supplied
            $numbers = isset($matches[1][0]) ? $matches[1][0] : '';
            $letters = isset($matches[2][0]) ? $matches[2][0] : '';
    
            return array($numbers, $letters);
        }
    
        // zipcode was of a string, but in an incorrect format (no combination of 4 letters (and 2 numbers))
        return false;
    }
    
    /**
     * This function makes a box with a radius of '$distance_in_km' and returns a
     * lon and lat.
     * When searching for records that need to be in this box, use the returned lat and
     * lon as boundaries: the records need to have lons and lats that lie between the returned
     * lons and lats from this function
     *
     * @param    float    $lat_degrees    The lat
     * @param    float   $lon_degrees    The longitude
     * @param     float   $distance_in_km    The radius in kilometers
     * @return            array            An array containing the lon and lat maximums
     */
    function getFlatBox($lat_degrees, $lon_degrees, $distance_in_km) {
    
        $radius = 6371.0;
    
        $rlat=$radius*sin(deg2rad(90-$lat_degrees));
    
        $dphi_lon=asin($distance_in_km/$rlat);
        $dphi_lat=asin($distance_in_km/$radius);
    
        $lat1=$lat_degrees-rad2deg($dphi_lat);
        $lat2=$lat_degrees+rad2deg($dphi_lat);
        $lon1=$lon_degrees-rad2deg($dphi_lon);
        $lon2=$lon_degrees+rad2deg($dphi_lon);
    
        return array($lat1,$lat2,$lon1,$lon2);
    }
    
}</codefragment>
  </duplication>
  <duplication lines="38" tokens="73">
    <file path="/home/vagrant/socsoc/app/Model/Message.php" line="200"/>
    <file path="/home/vagrant/socsoc/app/Model/Reaction.php" line="163"/>
    <codefragment>        'Sender' =&gt; array(
            'className' =&gt; 'User',
            'foreignKey' =&gt; 'sender_id',
            'conditions' =&gt; '',
            'fields' =&gt; '',
            'order' =&gt; ''
        ),
        'Recipient' =&gt; array(
            'className' =&gt; 'User',
            'foreignKey' =&gt; 'recipient_id',
            'conditions' =&gt; '',
            'fields' =&gt; '',
            'order' =&gt; ''
        ),
        'Post' =&gt; array(
            'className' =&gt; 'Post',
            'foreignKey' =&gt; 'post_id',
            'conditions' =&gt; '',
            'fields' =&gt; '',
            'order' =&gt; ''
        ),
        'Advertisement' =&gt; array(
            'className' =&gt; 'Advertisement',
            'foreignKey' =&gt; 'advertisement_id',
            'conditions' =&gt; '',
            'fields' =&gt; '',
            'order' =&gt; ''
        )
    );

/**
 * hasMany associations
 *
 * @var array
 */
    public $hasMany = array(
        'ChildMessage' =&gt; array(
            'className' =&gt; 'Message',
</codefragment>
  </duplication>
  <duplication lines="99" tokens="201">
    <file path="/home/vagrant/socsoc/app/Model/Post.php" line="867"/>
    <file path="/home/vagrant/socsoc/app/Model/Advertisement.php" line="209"/>
    <codefragment>    public function getClosestAdvertisements($options = array()){
        $conditions = array();

        if( ! isset($options['zipcode']) || empty($options['zipcode']) ){
            // no zipcode supplied,
            return false;
        }

        // get the zipcode of the correct form
        if( ! $zipcode = $this-&gt;makeValidZipcode($options['zipcode'])){
            $this-&gt;Session-&gt;setFlash(__("You didn't supply a valid zipcode. "));
            return false;
        }

        $options['zipcode']    = $zipcode[0].' '.$zipcode[1];
        $options['distance'] = isset( $options['distance']) ?  $options['distance'] : 0;
        $limit = null;

        // get the coordinates for the given zipcode in the searchform
        list($this-&gt;latFrom, $this-&gt;lonFrom) = $this-&gt;getCoordinatesFromPostcode($options['zipcode']);

        // the distances we will search for
        $distances = array('all distances', 200, 100, 50, 25, 15, 10, 5, 2, 1);

        // the holder for the advertisements
        $old = array();
        $new = array();

        // when we want to search in a specific radius
        $i = 0;
        while( empty($new)){
            $distance = $i == 0 ? null : $distances[$i];

            // Bereken met de functie getBoundingBox de waardes waarbinnen de latitude en de longitude moeten vallen
            list($lat1, $lat2, $lon1, $lon2) = $this-&gt;getFlatBox($this-&gt;latFrom, $this-&gt;lonFrom, $distance);

            // set the find condition for this distance-range.
            // the first run is without distance, to be sure there are suitable advertisements
            if( $i &gt; 0 ){
                $conditions = array(
                    'Advertisement.lat BETWEEN ? AND ?' =&gt; array($this-&gt;latFrom, $lat2),
                    'Advertisement.lon BETWEEN ? AND ?' =&gt; array($lon1, $this-&gt;lonFrom),
                );
            }

            // only get advertisements which are still active
            $conditions['Advertisement.end_including &gt;'] = date('Y-m-d', time());

            // set the options
            $findOptions = array('conditions' =&gt; $conditions);

//             // add a limit to the maximum number of fetched records, when supplied
//             if(isset($options['limit'])){
//                 $findOptions['limit'] = $options['limit'];
//             }

            // get the searchresult
            $this-&gt;recursive = -1;
            $advertisements = $this-&gt;find('all', $findOptions);

            if( count($advertisements) == 0  || $i == count($distances)-1){

                // when none found in first run, return empty array
                if( $i == 0){ return array(); }

                // return the old resultset
                $new = $old;
                unset($advertisements);
            }
            else{
                $old = $advertisements;
                $new = array();
                unset($advertisements);
            }

            $i++;
        }

        // extract the arrays to get a nicely formatted array
        $advertisements = Set::extract('{n}.Advertisement', $new);
        unset($new);
        unset($old);

        // add the distances in meters
        $advertisements = array_map(array($this, 'addDistance'), $advertisements);

        // sort by distance, from close by to far away
        $advertisements = Set::sort($advertisements, '{n}.distance', 'ASC');

        // get the max number of records, if the limit was supplied

        return $advertisements;
    }

    public function getClosestPosts( $user_id = 0, $totalRecords = 10 ){


        // get the current  user when no user_id was supplied
        if( $user_id == 0){
</codefragment>
  </duplication>
  <duplication lines="63" tokens="81">
    <file path="/home/vagrant/socsoc/app/webroot/test.php" line="24"/>
    <file path="/home/vagrant/socsoc/app/webroot/index.php" line="24"/>
    <codefragment>if (!defined('DS')) {
    define('DS', DIRECTORY_SEPARATOR);
}
/**
 * These defines should only be edited if you have cake installed in
 * a directory layout other than the way it is distributed.
 * When using custom settings be sure to use the DS and do not add a trailing DS.
 */

/**
 * The full path to the directory which holds "app", WITHOUT a trailing DS.
 *
 */
if (!defined('ROOT')) {
    define('ROOT', dirname(dirname(dirname(__FILE__))));
}
/**
 * The actual directory name for the "app".
 *
 */
if (!defined('APP_DIR')) {
    define('APP_DIR', basename(dirname(dirname(__FILE__))));
}

/**
 * The absolute path to the "Cake" directory, WITHOUT a trailing DS.
 *
 * For ease of development CakePHP uses PHP's include_path.  If you
 * need to cannot modify your include_path, you can set this path.
 *
 * Leaving this constant undefined will result in it being defined in Cake/bootstrap.php
 */
    //define('CAKE_CORE_INCLUDE_PATH', ROOT . DS . 'lib');

/**
 * Editing below this line should not be necessary.
 * Change at your own risk.
 *
 */
if (!defined('WEBROOT_DIR')) {
    define('WEBROOT_DIR', basename(dirname(__FILE__)));
}
if (!defined('WWW_ROOT')) {
    define('WWW_ROOT', dirname(__FILE__) . DS);
}

if (!defined('CAKE_CORE_INCLUDE_PATH')) {
    if (function_exists('ini_set')) {
        ini_set('include_path', ROOT . DS . 'lib' . PATH_SEPARATOR . ini_get('include_path'));
    }
    if (!include ('Cake' . DS . 'bootstrap.php')) {
        $failed = true;
    }
} else {
    if (!include (CAKE_CORE_INCLUDE_PATH . DS . 'Cake' . DS . 'bootstrap.php')) {
        $failed = true;
    }
}
if (!empty($failed)) {
    trigger_error("CakePHP core could not be found.  Check the value of CAKE_CORE_INCLUDE_PATH in APP/webroot/index.php.  It should point to the directory containing your " . DS . "cake core directory and your " . DS . "vendors root directory.", E_USER_ERROR);
}

if (Configure::read('debug') &lt; 1) {
</codefragment>
  </duplication>
  <duplication lines="24" tokens="97">
    <file path="/home/vagrant/socsoc/app/Controller/MessagesController.php" line="75"/>
    <file path="/home/vagrant/socsoc/app/Controller/MessagesController.php" line="175"/>
    <codefragment>        if ($this-&gt;request-&gt;is('post')) {
            $this-&gt;Message-&gt;create();
            if ($this-&gt;Message-&gt;save($this-&gt;request-&gt;data)) {
                $this-&gt;Session-&gt;setFlash(__('The message has been saved'), 'default', array(), 'success');
                $this-&gt;redirect(array('action' =&gt; 'index'));
            } else {
                $this-&gt;Session-&gt;setFlash(__('The message could not be saved. Please, try again.'), 'default', array(), 'error');
            }
        }
        $parentMessages = $this-&gt;Message-&gt;ParentMessage-&gt;find('list');
        $senders = $this-&gt;Message-&gt;Sender-&gt;find('list');
        $recipients = $this-&gt;Message-&gt;Recipient-&gt;find('list');
        $advertisements = $this-&gt;Message-&gt;Advertisement-&gt;find('list');
        $this-&gt;set(compact('parentMessages', 'senders', 'recipients', 'advertisements'));
    }

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
    public function edit($id = null) {
</codefragment>
  </duplication>
  <duplication lines="31" tokens="131">
    <file path="/home/vagrant/socsoc/app/Controller/MessagesController.php" line="98"/>
    <file path="/home/vagrant/socsoc/app/Controller/MessagesController.php" line="198"/>
    <codefragment>    public function edit($id = null) {
        $this-&gt;Message-&gt;id = $id;
        if (!$this-&gt;Message-&gt;exists()) {
            throw new NotFoundException(__('Invalid message'));
        }
        if ($this-&gt;request-&gt;is('post') || $this-&gt;request-&gt;is('put')) {
            if ($this-&gt;Message-&gt;save($this-&gt;request-&gt;data)) {
                $this-&gt;Session-&gt;setFlash(__('The message has been saved'), 'default', array(), 'success');
                $this-&gt;redirect(array('action' =&gt; 'index'));
            } else {
                $this-&gt;Session-&gt;setFlash(__('The message could not be saved. Please, try again.'), 'default', array(), 'error');
            }
        } else {
            $this-&gt;request-&gt;data = $this-&gt;Message-&gt;read(null, $id);
        }
        $parentMessages = $this-&gt;Message-&gt;ParentMessage-&gt;find('list');
        $senders = $this-&gt;Message-&gt;Sender-&gt;find('list');
        $recipients = $this-&gt;Message-&gt;Recipient-&gt;find('list');
        $advertisements = $this-&gt;Message-&gt;Advertisement-&gt;find('list');
        $this-&gt;set(compact('parentMessages', 'senders', 'recipients', 'advertisements'));
    }

/**
 * delete method
 *
 * @throws MethodNotAllowedException
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
    public function delete($id = null) {
</codefragment>
  </duplication>
  <duplication lines="24" tokens="71">
    <file path="/home/vagrant/socsoc/app/Controller/MessagesController.php" line="128"/>
    <file path="/home/vagrant/socsoc/app/Controller/MessagesController.php" line="228"/>
    <codefragment>    public function delete($id = null) {
        if (!$this-&gt;request-&gt;is('post')) {
            throw new MethodNotAllowedException();
        }
        $this-&gt;Message-&gt;id = $id;
        if (!$this-&gt;Message-&gt;exists()) {
            throw new NotFoundException(__('Invalid message'));
        }
        if ($this-&gt;Message-&gt;delete()) {
            $this-&gt;Session-&gt;setFlash(__('Message deleted'), 'default', array(), 'success');
            $this-&gt;redirect(array('action' =&gt; 'index'));
        }
        $this-&gt;Session-&gt;setFlash(__('Message was not deleted'), 'default', array(), 'error');
        $this-&gt;redirect(array('action' =&gt; 'index'));
    }

/**
 * admin_index method
 *
 * @return void
 */
    public function admin_index() {
        $this-&gt;Message-&gt;recursive = 0;
        $this-&gt;set('messages', $this-&gt;paginate());
</codefragment>
  </duplication>
  <duplication lines="28" tokens="101">
    <file path="/home/vagrant/socsoc/app/Controller/ImagesController.php" line="61"/>
    <file path="/home/vagrant/socsoc/app/Controller/ImagesController.php" line="181"/>
    <codefragment>    public function edit($id = null) {
        $this-&gt;Image-&gt;id = $id;
        if (!$this-&gt;Image-&gt;exists()) {
            throw new NotFoundException(__('Invalid image'));
        }
        if ($this-&gt;request-&gt;is('post') || $this-&gt;request-&gt;is('put')) {
            if ($this-&gt;Image-&gt;save($this-&gt;request-&gt;data)) {
                $this-&gt;Session-&gt;setFlash(__('The image has been saved'), 'default', array(), 'success');
                $this-&gt;redirect(array('action' =&gt; 'index'));
            } else {
                $this-&gt;Session-&gt;setFlash(__('The image could not be saved. Please, try again.'), 'default', array(), 'error');
            }
        } else {
            $this-&gt;request-&gt;data = $this-&gt;Image-&gt;read(null, $id);
        }
        $posts = $this-&gt;Image-&gt;Post-&gt;find('list');
        $this-&gt;set(compact('posts'));
    }

/**
 * delete method
 *
 * @throws MethodNotAllowedException
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
    public function delete($id = null) {
</codefragment>
  </duplication>
  <duplication lines="26" tokens="71">
    <file path="/home/vagrant/socsoc/app/Controller/ImagesController.php" line="88"/>
    <file path="/home/vagrant/socsoc/app/Controller/ImagesController.php" line="208"/>
    <codefragment>    public function delete($id = null) {
        if (!$this-&gt;request-&gt;is('post')) {
            throw new MethodNotAllowedException();
        }
        $this-&gt;Image-&gt;id = $id;
        if (!$this-&gt;Image-&gt;exists()) {
            throw new NotFoundException(__('Invalid image'));
        }
        if ($this-&gt;Image-&gt;delete()) {
            $this-&gt;Session-&gt;setFlash(__('Image deleted'), 'default', array(), 'success');
            $this-&gt;redirect(array('action' =&gt; 'index'));
        }
        $this-&gt;Session-&gt;setFlash(__('Image was not deleted'), 'default', array(), 'error');
        $this-&gt;redirect(array('action' =&gt; 'index'));
    }
    

    /**
     * This function is a wrapper for the javascript function, where
     * you want to delete only 1 image.
     *
     * The javascript is used on the add and edit pages of posts
     */
    public function deleteImage($id = ''){
        Configure::write('debug', 0);
        $this-&gt;autorender = false;
</codefragment>
  </duplication>
  <duplication lines="13" tokens="78">
    <file path="/home/vagrant/socsoc/app/Controller/RubricsController.php" line="219"/>
    <file path="/home/vagrant/socsoc/app/Controller/RubricsController.php" line="306"/>
    <codefragment>        $this-&gt;Rubric-&gt;id = $id;
        if (!$this-&gt;Rubric-&gt;exists()) {
            throw new NotFoundException(__('Invalid rubric'));
        }
    
        // if there are posts having this rubric, show the user the number of posts in the view /admin/rubrics/delete
        if($this-&gt;Post-&gt;find('count', array('conditions' =&gt; array('rubric_id' =&gt; $id))) !== FALSE ){
            $this-&gt;Post-&gt;recursive = -1;
            $this-&gt;set('totalPosts', $this-&gt;Post-&gt;find('count', array('conditions' =&gt; array('rubric_id' =&gt; $id))));
            $this-&gt;set('posts', $this-&gt;Post-&gt;findAllByRubricId($id));
        }
    
        $this-&gt;request-&gt;data = $this-&gt;Rubric-&gt;read(null, $id);
</codefragment>
  </duplication>
</pmd-cpd>
